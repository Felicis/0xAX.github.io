<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just a Memo</title><link href="0xax.github.com/" rel="alternate"></link><link href="None/feeds/alexander-kuleshov.atom.xml" rel="self"></link><id>0xax.github.com/</id><updated>2016-01-05T00:00:00+06:00</updated><entry><title>How GNU GRUB works</title><link href="0xax.github.com/how-gnu-grub-works.html" rel="alternate"></link><published>2016-01-05T00:00:00+06:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2016-01-05:0xax.github.com/how-gnu-grub-works.html</id><summary type="html">&lt;p&gt;This blog post is closely related with my interest in low-level stuff. As you already may know, I've started to be interested in such things like: How &lt;code&gt;N&lt;/code&gt; works, where the &lt;code&gt;N&lt;/code&gt; is something like - what does occur when we turn on the computer, pressing key on keyboard, how does an operating system load a program and many many more. I have found answers on some of my questions. You can look on the set if
blog &lt;a href="http://0xax.github.io/tag/assembler.html"&gt;posts&lt;/a&gt; which are decribe some aspects of the &lt;a href="https://en.wikipedia.org/wiki/Assembly_language"&gt;assembly&lt;/a&gt; programming or the &lt;a href="https://0xax.gitbooks.io/linux-insides/content/index.html"&gt;linux-insides&lt;/a&gt; book which describes internals of the Linux kernel.&lt;/p&gt;
&lt;p&gt;Yes. This answered on some of my questions, but not at all. Lately, besides the Linux kernel, I've also learned internals of the &lt;a href="https://en.wikipedia.org/wiki/GNU_GRUB"&gt;GNU GRUB&lt;/a&gt;. In the previous year I've got many thank you words from different people for the &lt;code&gt;linux-insides&lt;/code&gt;. Seems that low-level stuff is interesting not only for me and I decided to write this blog post which will cover some parts of the &lt;code&gt;GNU GRUB&lt;/code&gt; and we will see answer on the question which is in the title of this post - How GNU GRUB works. Hope, that it will be useful for somebody.&lt;/p&gt;
&lt;p&gt;If you use Linux, you likely know about &lt;code&gt;GNU GRUB&lt;/code&gt;. But just in case, wikipedia says that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GNU GRUB (short for GNU GRand Unified Bootloader) is a boot loader package from the GNU Project&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, the GNU GRUB is a bootloader. Main point of a bootloader is to load an operating system kernel and to transfer control to it. GNU GRUB has many features like support of different types of executable file formats, dynamic configuration, graphical menu interface, support for different types of file systems and etc.&lt;/p&gt;
&lt;p&gt;So the point of the bootloader is clear - to load an operating system kernel. In this post we will see how the GNU GRUB loads the Linux kernel. But before this let's take a little look on architecture of the GNU GRUB. Even if you are newbie Linux user, you can guess that all &lt;code&gt;boot&lt;/code&gt; related data is placed in the &lt;code&gt;/boot&lt;/code&gt; directory. For me it looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="boot-dir" src="http://s30.postimg.org/3mfl4a681/2016_01_02_193818_933x47_scrot.png" /&gt;&lt;/p&gt;
&lt;p&gt;This directory contains two &lt;a href="https://en.wikipedia.org/wiki/Initrd"&gt;initrd&lt;/a&gt; images, the Linux kernel image and the &lt;code&gt;grub&lt;/code&gt; directory which contains GNU GRUB related data:&lt;/p&gt;
&lt;p&gt;&lt;img alt="boot-grub-dir" src="http://s17.postimg.org/bgttwn3u7/ls_boot.png" /&gt;&lt;/p&gt;
&lt;p&gt;Directory with fonts, GNU GRUB configuration file, themes, locales, the &lt;code&gt;grubenv&lt;/code&gt; file that contains GNU GRUB environment variables which are can be used in runtime and the &lt;code&gt;i386-pc&lt;/code&gt; directory which contains GNU GRUB images and modules. Content of the &lt;code&gt;i386-pc&lt;/code&gt; directory is the most interesting for us. Yes the &lt;code&gt;/boot/grub&lt;/code&gt; directory contains many other interesting directories/files besides the &lt;code&gt;/boot/grub&lt;/code&gt; directory, but this post will not cover topics like how to make GNU GRUB menu beautiful, readable and etc. If we will open the &lt;code&gt;/boot/grub/i386-pc&lt;/code&gt; directory, we will find three types of files there:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*.lst&lt;/code&gt; files - contain lists of available options depends on file. For example, the &lt;code&gt;/boot/grub/i386-pc/video.lst&lt;/code&gt; contains list of available video modes or the &lt;code&gt;/boot/grub/i386-pc/fs.list&lt;/code&gt; file contains information about supported file systems;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.mod&lt;/code&gt; files - 32-bit &lt;a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format"&gt;ELF&lt;/a&gt; files which provide additional functional for GNU GRUB. For example, the &lt;code&gt;/boot/grub/i386-pc/acpi.mod&lt;/code&gt; adds support of the &lt;a href="https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface"&gt;Advanced Configuration and Power Interface&lt;/a&gt; which is used to perform various power-related functions or &lt;code&gt;/boot/grub/i386-pc/ext2.mod&lt;/code&gt; provides support for &lt;a href="https://en.wikipedia.org/wiki/Ext2"&gt;ext2&lt;/a&gt; file system;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*.img&lt;/code&gt; files - only two files: &lt;code&gt;/boot/grub/i386-pc/boot.img&lt;/code&gt; and &lt;code&gt;/boot/grub/i386-pc/core.img&lt;/code&gt;. We need to look closer on this file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first &lt;code&gt;boot.img&lt;/code&gt; file is the entry of the bootloader on a &lt;a href="https://en.wikipedia.org/wiki/BIOS"&gt;PC BIOS&lt;/a&gt; system. The content of this file is written to the first sector of the disk or in the &lt;a href="https://en.wikipedia.org/wiki/Master_boot_record"&gt;Master boot record&lt;/a&gt;. The main point of the &lt;code&gt;boot.img&lt;/code&gt; is to load first sector (512 bytes) of the &lt;code&gt;core.img&lt;/code&gt; which will continue to do main job of the bootloader. As &lt;code&gt;boot.img&lt;/code&gt; is in the master boot record, it must meet several conditions. First of all its size must be 512-bytes and the last two bytes must be &lt;code&gt;0xAA55&lt;/code&gt;. We can see that &lt;code&gt;boot.img&lt;/code&gt; is 512 bytes size file:&lt;/p&gt;
&lt;p&gt;&lt;img alt="boot.img" src="http://s2.postimg.org/7e8s3cuzd/boot_img.png" /&gt;&lt;/p&gt;
&lt;p&gt;and contains two magic bytes in the end:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~$ hexdump -s 510 /boot/grub/i386-pc/boot.img
00001fe aa55
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Besides two magic bytes, the &lt;code&gt;Master boot record&lt;/code&gt; must contain bootstrap code which will load second stage of the bootloader which can be much more than 512 bytes and &lt;a href="https://en.wikipedia.org/wiki/Partition_table"&gt;partition table&lt;/a&gt; with four 16-bytes partition entries. Generall structure of the &lt;code&gt;MBR&lt;/code&gt; must be like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;0   +--------------------+
    |                    |
    |   Bootstrap code   |
446 |                    |
    |                    |
    |  Partition entry 1 |
    |  Partition entry 2 |
    |  Partition entry 3 |
    |  Partition entry 4 |
510 |        0x55        |
511 |        0xaa        |
512 +--------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second &lt;code&gt;core.img&lt;/code&gt; file does the main job for us. It contains file system drivers, so it can load configuration from the &lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; file and modules. The main point of the &lt;code&gt;core.img&lt;/code&gt; is to transfer control to the last - second stage of the grub. At this moment, the GNU GRUB will have loaded modules, so it will know everything about operating system kernels which are needed to load. It draws menu, reacts on selection and etc.&lt;/p&gt;
&lt;p&gt;Before we will start to dive into low-level source code of the GNU GRUB. We need to understand how all of this data occurs on a disk of computer. Besides bootloader functions, the GNU GRUB provides a rich set of utils:&lt;/p&gt;
&lt;p&gt;&lt;img alt="grub-utils" src="http://s22.postimg.org/z9plrxbld/grub_utils.png" /&gt;&lt;/p&gt;
&lt;p&gt;And one of this util may help us to install GNU GRUB on a computer. The name of this util is - &lt;code&gt;grub-install&lt;/code&gt;. As we can read in the &lt;code&gt;grub-instal&lt;/code&gt; manual page. The &lt;code&gt;grub-install&lt;/code&gt; util:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;grub-install - install GRUB on your drive&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We just saw a little about GNU GRUB related files and now is time to see how the &lt;code&gt;grub-install&lt;/code&gt; installs master boot record and this files. Let's look on the source code if the &lt;code&gt;grub-install&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;The grub-install util&lt;/h2&gt;
&lt;p&gt;Implementation of the GNU GRUB utils is located in the &lt;code&gt;utils&lt;/code&gt; directory. In our case, implementation of the &lt;code&gt;grub-install&lt;/code&gt; utils is in the &lt;code&gt;grub-install.c&lt;/code&gt;. If we will look on its &lt;code&gt;main&lt;/code&gt; function, we will see that it starts from the call of the &lt;code&gt;grub_util_host_init&lt;/code&gt; function which defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/osdep/basic/init.c"&gt;grub-core/osdep/basic/init.c&lt;/a&gt; source code file and produces standard stuff for a C programs, like the call of the &lt;code&gt;set_program_name&lt;/code&gt;, setting locale and etc.&lt;/p&gt;
&lt;p&gt;After the first inital initialization, we can see the call of the &lt;code&gt;arg_parse&lt;/code&gt; function which as we may understand from the name - parses command line arguments of the &lt;code&gt;grub-install&lt;/code&gt; util. We will not dive into details of implementation of the &lt;code&gt;argp_parse&lt;/code&gt; function in ths post. I don't know how about you, but now, its interesting for me only low-level stuff in the GRUB. At the next step as we parsed command line arguments of the &lt;code&gt;grub-install&lt;/code&gt; util, we start to check these arguments and do something depend on their values. First of all, we check the &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--verbose&lt;/code&gt; flag which allows us to see verbose output of the &lt;code&gt;grub-instal&lt;/code&gt; work. If this flag is set we set &lt;code&gt;debug=all&lt;/code&gt; environment variable of GRUB with the call of the &lt;code&gt;grub_env_set&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;grub_env_set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GRUB stores its environment variables in the hashtable which is represented by the following structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;grub_env_context&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;grub_env_var&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HASHSZ&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;grub_env_context&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The implementation of the &lt;code&gt;grub_env_set&lt;/code&gt; function is simple. It just calculates index in the &lt;code&gt;grub_env_context&lt;/code&gt; hashtable and stores a given variable in it. After this we can see the call of the:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_util_load_config&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;function. This function just fills the &lt;code&gt;grub_util_config&lt;/code&gt; structure from the GRUB configuration file (located in the &lt;code&gt;/etc/default/grub&lt;/code&gt;). This structure consists from two fields. Both fields are depends on the following environment variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GRUB_ENABLE_CRYPTODISK&lt;/code&gt; - allows to install GRUB on the encrypted disk.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GRUB_DISTRIBUTOR&lt;/code&gt; - provides string which is associated with the distributor. For example, for me now it is:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /etc/default/grub &lt;span class="p"&gt;|&lt;/span&gt; grep DIST
&lt;span class="nv"&gt;GRUB_DISTRIBUTOR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Arch&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this we check the &lt;code&gt;GRUB_DISTRIBUTOR&lt;/code&gt; value and if we've found it in the GRUB configuration file we save it in the &lt;code&gt;bootloader_id&lt;/code&gt; variable. In other way the &lt;code&gt;bootloader_id&lt;/code&gt; will contain &lt;code&gt;"grub"&lt;/code&gt; string by default. At the next step we need to check current platform and exit in a failure case. The &lt;code&gt;grub-install&lt;/code&gt; util does it with the call of the &lt;code&gt;get_default_platform&lt;/code&gt; function. This function checks &lt;code&gt;gcc&lt;/code&gt; directives and returns our platform:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="nf"&gt;get_default_platform&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef __powerpc__&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;powerpc-ieee1275&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
   &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="cp"&gt;#elif defined (__amd64__) || defined (__x86_64__) || defined (__i386__)&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;grub_install_get_default_x86_platform&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;grub_install_get_default_x86_platform ()&lt;/code&gt; function returns &lt;code&gt;x86_64-efi&lt;/code&gt;, &lt;code&gt;i386-efi&lt;/code&gt; or just &lt;code&gt;i386-pc&lt;/code&gt; on &lt;code&gt;x86_64&lt;/code&gt; platform. So, now we know target machine and now we need to get the path of directory where &lt;code&gt;grub-insta&lt;/code&gt; util will install its modules. In our case it will be &lt;code&gt;/lib/grub/i386-pc&lt;/code&gt; and the &lt;code&gt;grub_install_source_directory&lt;/code&gt; variable will contain this path. Besides the name of the target platform, we need to get information about this platform. The &lt;code&gt;grub-install&lt;/code&gt; util will do it with the call of the &lt;code&gt;grub_install_get_target()&lt;/code&gt; function. The main point of this function is to return item from the &lt;code&gt;platforms&lt;/code&gt; array:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;platforms&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GRUB_INSTALL_PLATFORM_MAX&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GRUB_INSTALL_PLATFORM_I386_PC&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i386&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;pc&amp;quot;&lt;/span&gt;        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GRUB_INSTALL_PLATFORM_I386_EFI&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;         &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i386&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;efi&amp;quot;&lt;/span&gt;       &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GRUB_INSTALL_PLATFORM_I386_QEMU&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i386&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="s"&gt;&amp;quot;qemu&amp;quot;&lt;/span&gt;      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and print information about it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;platname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;grub_install_get_platform_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Installing for %s platform.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;platname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;platname&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the next step we need to select GRUB's disk module depends on the platform name. In our case it will be &lt;code&gt;biosdisk&lt;/code&gt; module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nl"&gt;GRUB_INSTALL_PLATFORM_I386_PC&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;disk_module&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;disk_module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;xstrdup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;biosdisk&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
      &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step after we have selected disk module is initialization of all modules:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;grub_init_all&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;grub_gcry_init_all&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;grub_hostfs_init&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="n"&gt;grub_host_init&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The source code of GRUB modules is located in different parts of GRUB source code, but each module contains definition of the &lt;code&gt;GRUB_MOD_INIT&lt;/code&gt; and &lt;code&gt;GRUB_MOD_FINI&lt;/code&gt; macros which make all initialization stuff. After all modules are initialzed we are copying/installing to the &lt;code&gt;/boot/grub&lt;/code&gt; directlry all GRUB files (modules, locales, themes and etc.) to the source directory by the call of the:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;grub_install_copy_files&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grub_install_source_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;grubdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;platform&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;function. After all of this manipulations, the &lt;code&gt;grub-install&lt;/code&gt; util executes many different thing. It creates the &lt;code&gt;/boot/grub/envblk&lt;/code&gt; file which is the GRUB environment block that is stores GRUB's environment variables. You can use the &lt;code&gt;grub-editevn --list&lt;/code&gt; util to lust the GRUB environment variables. At the next step, the &lt;code&gt;grub-install&lt;/code&gt; checks the given divice, tries to understand type of files system on a given device and loads module for the certain file system type. It loads the module which provides functional for a disk reading. You can remember that it is the &lt;code&gt;biosdisk&lt;/code&gt; for us. But the main point of the &lt;code&gt;grub-install&lt;/code&gt; utils is to install &lt;a href="https://en.wikipedia.org/wiki/Master_boot_record"&gt;MBR&lt;/a&gt;, the &lt;code&gt;core.img&lt;/code&gt; and the &lt;code&gt;kernel.img&lt;/code&gt;. The most interesting part for us is the call of the:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;install_bootsector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;grub_util_bios_setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;platdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;boot.img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;core.img&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;install_drive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;fs_probe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_floppy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_rs_codes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;function. The &lt;code&gt;grub_util_bios_setup&lt;/code&gt; function defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/util/setup.c"&gt;util/setup.c&lt;/a&gt; source code file and its main point is to setup MBR. This function takes eight arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;platdir&lt;/code&gt; - platform dependend directory wich contains GRUB modules, image and etc. (For example - &lt;code&gt;/lib/grub/i386-pc&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;GRUB boot image;&lt;/li&gt;
&lt;li&gt;GRUB core image;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install_drive&lt;/code&gt; - name of the device where to install GRUB;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;force&lt;/code&gt; - install or not if any problems are presented;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fs_probe&lt;/code&gt; - allows GRUB to skip file system probes for the give divice;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allow_floppy&lt;/code&gt; - makes a drive bootable as floppy;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;add_rs_codes&lt;/code&gt; - shows apply or not &lt;a href="https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction"&gt;reed-solomon&lt;/a&gt; codes during &lt;code&gt;core-img&lt;/code&gt; embbeding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;grub_util_bios_setup&lt;/code&gt; function reads the &lt;code&gt;boot.img&lt;/code&gt; and the &lt;code&gt;core.img&lt;/code&gt; from the disk, sets the root device, copies &lt;a href="https://en.wikipedia.org/wiki/Partition_table"&gt;partition table&lt;/a&gt; (will see more about it later), reads partition table, checks errors and writes the &lt;code&gt;core.img&lt;/code&gt; and the &lt;code&gt;boot.img&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nsec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;grub_disk_write&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_dev&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;GRUB_DISK_SECTOR_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;core_img&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;GRUB_DISK_SECTOR_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grub_disk_write&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dest_dev&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;disk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BOOT_SECTOR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GRUB_DISK_SECTOR_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;boot_img&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;grub_util_error&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grub_errmsg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all. Now we have installed master boot record and other boot-related GRUB parts on our machine.&lt;/p&gt;
&lt;h2&gt;Booting process&lt;/h2&gt;
&lt;p&gt;The booting process starts when BIOS reads first sector (first 512 bytes) from a disk and loads it into memory by &lt;code&gt;0x0000:0x7c000&lt;/code&gt; address. The GNU GRUB MBR code is implemented in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/boot/i386/pc/boot.S"&gt;grub-core/boot/i386/pc/boot.S&lt;/a&gt; assembly source code file. As I already wrote above, the main point of the master boot record bootstrap code is to load second second sector from disk and control transfer to it. Besides this, bootstrap code does not do almost anything, because as you remember it is very small, only 512 bytes size. Let's look on the implementation of the bootstrap code.&lt;/p&gt;
&lt;p&gt;In the beginning of the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/boot/i386/pc/boot.S"&gt;grub-core/boot/i386/pc/boot.S&lt;/a&gt; source code file we can see definition of the global labels and the jump to the local label:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx-Member"&gt;globl&lt;/span&gt; &lt;span class="nx"&gt;_start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;_start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;jmp&lt;/span&gt; &lt;span class="kd"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;after_BPB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;nop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;LOCAL&lt;/code&gt; macro defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/include/grub/symbol.h"&gt;include/grub/symbol.h&lt;/a&gt; header file and expands to the concatenation of the &lt;code&gt;L_&lt;/code&gt; and given symbol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define LOCAL(sym)  L_ ## sym&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in our case it will expand to the &lt;code&gt;L_after_BPB&lt;/code&gt; label. This label represents the &lt;a href="https://en.wikipedia.org/wiki/BIOS_parameter_block"&gt;BIOS parameter block&lt;/a&gt; which contains information about physycal layout of a disk. At the start of the &lt;code&gt;L_after_BPB&lt;/code&gt; label we disable interrupts with the &lt;code&gt;cli&lt;/code&gt; instruction to prevent erasing of the &lt;code&gt;dl&lt;/code&gt; register which stores number of hard drive from which we have loaded. After this we test value of the &lt;code&gt;dl&lt;/code&gt; register and set to &lt;code&gt;0x80&lt;/code&gt; (first hard drive in the system) if buggy BIOS did not set it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    cli
    testb   $0x80, %dl
    jz      2f
2:
    movb    $0x80, %dl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the next step we set data segment and stack segment registers to the known value - it is zero in our case, setup stack pointer to the top of the stack segment (&lt;code&gt;0x2000&lt;/code&gt;) and enable interrupts again, because from this point we are safe now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;    xorw    %ax, %ax&lt;/span&gt;
&lt;span class="x"&gt;    movw    %ax, %ds&lt;/span&gt;
&lt;span class="x"&gt;    movw    %ax, %ss&lt;/span&gt;

&lt;span class="x"&gt;    movw    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;GRUB_BOOT_MACHINE_STACK_SEG&lt;/span&gt;&lt;span class="x"&gt;, %sp&lt;/span&gt;
&lt;span class="x"&gt;    sti     /* we&amp;#39;re safe again */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We just made enabled interrupts, so we can print &lt;code&gt;Welcome&lt;/code&gt; message to the screen with the &lt;code&gt;MSG&lt;/code&gt; macro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;MSG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notification_string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="vi"&gt;#define&lt;/span&gt; &lt;span class="nx"&gt;MSG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="nx"&gt;movw&lt;/span&gt; &lt;span class="nv"&gt;$x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;si&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="kd"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;notification_string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx-Member"&gt;asciz&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GRUB &amp;quot;&lt;/span&gt;

&lt;span class="kd"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nx"&gt;lodsb&lt;/span&gt;           &lt;span class="cm"&gt;/* loads character from %si to %al */&lt;/span&gt;
    &lt;span class="nx"&gt;cmpb&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;al&lt;/span&gt; &lt;span class="cm"&gt;/* check that we are at the end of string */&lt;/span&gt;
    &lt;span class="nx"&gt;jne&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;          &lt;span class="cm"&gt;/* display character if we are not at the end of string */&lt;/span&gt;
    &lt;span class="nx"&gt;ret&lt;/span&gt;

&lt;span class="cm"&gt;/* %si stores pointer to the notification_string */&lt;/span&gt;
&lt;span class="cm"&gt;/* %bx represents foreground color */&lt;/span&gt;
&lt;span class="cm"&gt;/* %ah number of BIOS service */&lt;/span&gt;
&lt;span class="cm"&gt;/* int $10 - http://www.ctyme.com/intr/rb-0106.htm */&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="nx"&gt;movw&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mh"&gt;0x0001&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;bx&lt;/span&gt;
    &lt;span class="nx"&gt;movb&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mh"&gt;0xe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ah&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mh"&gt;0x10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After we saw the &lt;code&gt;notification_string&lt;/code&gt; in our screen, the &lt;code&gt;boot.S&lt;/code&gt; starts to load first sector of the &lt;code&gt;core.img&lt;/code&gt; file which is represented by the &lt;code&gt;diskboot.img&lt;/code&gt; image. To read first sector of the &lt;code&gt;core.img&lt;/code&gt; we will use the &lt;code&gt;0x42&lt;/code&gt; function of the &lt;a href="http://www.ctyme.com/intr/rb-0708.htm"&gt;0x13&lt;/a&gt; interrupt. First of all we need to check support of the &lt;a href="https://en.wikipedia.org/wiki/Logical_block_addressing"&gt;LBA&lt;/a&gt; in the BIOS by the call of the &lt;a href="http://www.ctyme.com/intr/rb-0706.htm"&gt;0x41&lt;/a&gt; fuction of the &lt;code&gt;0x13&lt;/code&gt; interrupt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    movb    $0x41, %ah
    movw    $0x55aa, %bx
    int $0x13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the extended read or &lt;code&gt;LBA&lt;/code&gt; is supported we start to read first 512 bytes from the &lt;code&gt;core.img&lt;/code&gt;. To use extended read we must call the &lt;a href="http://www.ctyme.com/intr/rb-0708.htm"&gt;0x42&lt;/a&gt; function of the &lt;code&gt;0x13&lt;/code&gt; interrupt with the following set of arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%ah&lt;/code&gt; register must contain number of the function, &lt;code&gt;0x42&lt;/code&gt; in our case;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%dl&lt;/code&gt; register must contain number of the hard drive (starts from &lt;code&gt;0x80&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%ds:%si&lt;/code&gt; registers must point to the &lt;a href="http://www-pc.uni-regensburg.de/hardware/TECHDOK/ATA_EDD_11.PDF"&gt;disk address packet structure&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The disk address packet structure is a data structure which contains data that helps to convert logical block addressing information to physical parameters (&lt;a href="https://en.wikipedia.org/wiki/Cylinder-head-sector"&gt;Cylinders, Heads, Sectors&lt;/a&gt;) of a disk. Before the call of the &lt;code&gt;0x13&lt;/code&gt; interrupt, we need to fill disk address packet structure. In the our code it starts at the &lt;code&gt;disk_address_packet&lt;/code&gt; label. General structure of the disk address packet structure is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Offset
      +---------------------------------+
  0   |  Packet size in bytes           |
  1   |  Reserved (must be 0)           |
  2   |  Number of blocks to transfer   |
  3   |  Reserved (must be 0)           |
  4   |  Address of transfer buffer     |
  8   |  Started absolute block number  |
      +---------------------------------+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Address of the disk address packet structure is located in the &lt;code&gt;%si&lt;/code&gt; register:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;    movw    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;disk_address_packet&lt;/span&gt;&lt;span class="x"&gt;, %si&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, we can set reserved bytes to zero and packet size in our &lt;code&gt;disk_packet_packet&lt;/code&gt; with the:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;movw    $0x0010, (%si)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;packets size will be &lt;code&gt;16&lt;/code&gt; bytes here. We will read one 512 bytes block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    xorw    %ax, %ax
    ...
    incw    %ax
    movw    %ax, 2(%si)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the end we need to set block number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="kd"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kernel_sector&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ebx&lt;/span&gt;
    &lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="kd"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kernel_sector_high&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ebx&lt;/span&gt;
    &lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;si&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and pointer to the buffer where we will read data from disk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;    movw    &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;GRUB_BOOT_MACHINE_BUFFER_SEG&lt;/span&gt;&lt;span class="x"&gt;, 6(%si)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and call the &lt;code&gt;0x13&lt;/code&gt; interrupt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    movb    $0x42, %ah
    int     $0x13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If all is good, the &lt;code&gt;GRUB_BOOT_MACHINE_BUFFER_SEG&lt;/code&gt; will point to the beginning of the &lt;code&gt;diskboot.img&lt;/code&gt; image in memory. In the of the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/boot/i386/pc/boot.S"&gt;grub-core/boot/i386/pc/boot.S&lt;/a&gt; we relocate our buffer to the &lt;code&gt;GRUB_BOOT_MACHINE_KERNEL_ADDR&lt;/code&gt; or address and jump into it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;jmp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;kernel_address&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From this moment we have &lt;code&gt;diskboot.img&lt;/code&gt; (which is first 512 bytes of the &lt;code&gt;core.img&lt;/code&gt;) in the memory. As you may remember, the main point of the &lt;code&gt;diskboot.img&lt;/code&gt; is to load rest of the &lt;code&gt;core.img&lt;/code&gt; and jump into it. I will not describe this process here, it is pretty easy to understand if you understood previous description of how the &lt;code&gt;boot.S&lt;/code&gt; loads &lt;code&gt;diskboot.img&lt;/code&gt;. Both of these processes are prety similar. After the &lt;code&gt;diskboot.img&lt;/code&gt; will load rest of the &lt;code&gt;core.img&lt;/code&gt; it jumps to the GNU GRUB kernel code at &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/boot/i386/pc/startup_raw.S"&gt;grub-core/boot/i386/pc/startup_raw.S&lt;/a&gt; source code file. The main point of this code is to make preparation before the &lt;a href="https://en.wikipedia.org/wiki/C_%28programming_language%29"&gt;C&lt;/a&gt; code. You can remember that we need to prepare &lt;a href="https://en.wikipedia.org/wiki/.bss"&gt;BSS&lt;/a&gt; section for global uninitialized data to run &lt;code&gt;C&lt;/code&gt; code and stack. Besides this we execute transition to &lt;a href="https://en.wikipedia.org/wiki/Protected_mode"&gt;protected mode&lt;/a&gt;. Let's look on this.&lt;/p&gt;
&lt;p&gt;Before the transition to the protected mode, we set segment registers to the known value (zero in our case) and setup stack. After this we call the &lt;code&gt;real_to_prot&lt;/code&gt; funtion which is implemented in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/kern/i386/realmode.S"&gt;grub-core/kern/i386/realmode.S&lt;/a&gt; assembly file. It starts from the loading of &lt;a href="http://wiki.osdev.org/Global_Descriptor_Table"&gt;Global Descriptor Table&lt;/a&gt; with the &lt;code&gt;lgdt&lt;/code&gt; instruction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lgdtl   gdtdesc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where the &lt;code&gt;gdtdesc&lt;/code&gt; contains description of four segments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code segment;&lt;/li&gt;
&lt;li&gt;Data segment;&lt;/li&gt;
&lt;li&gt;Real-mode code segment;&lt;/li&gt;
&lt;li&gt;Real-mode data segment.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will not describe what is it &lt;code&gt;GDT&lt;/code&gt; and why do we need in it in this post. More about it you can read more about it in the second &lt;a href="https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-2.html"&gt;part&lt;/a&gt; of the linux-insides book. After we set the &lt;code&gt;Global Descriptor Table&lt;/code&gt;, we turn on protected mode by the setting &lt;code&gt;PE&lt;/code&gt; bit in the &lt;code&gt;%cr0&lt;/code&gt; &lt;a href="https://en.wikipedia.org/wiki/Control_register"&gt;control register&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;    movl    %cr0, %eax&lt;/span&gt;
&lt;span class="x"&gt;    orl &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;GRUB_MEMORY_CPU_CR0_PE_ON&lt;/span&gt;&lt;span class="x"&gt;, %eax&lt;/span&gt;
&lt;span class="x"&gt;    movl    %eax, %cr0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and jump to the protected mode. Next we clear segment registers, setup protected mode stack and load &lt;a href="https://en.wikipedia.org/wiki/Interrupt_descriptor_table"&gt;interrupt descriptor table&lt;/a&gt; by the call of the &lt;code&gt;lidtl&lt;/code&gt; instruction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;lidt protidt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interrupt descriptor table contains addresses of the interrupt handlers which are will be called when an interrupt occurs. After all of this manipulations we are in protected mode and may return to the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/boot/i386/pc/startup_raw.S"&gt;grub-core/boot/i386/pc/startup_raw.S&lt;/a&gt; assembly file. In the end, we fill &lt;code&gt;%edx&lt;/code&gt;, &lt;code&gt;%edi&lt;/code&gt;, &lt;code&gt;%ecx&lt;/code&gt; and &lt;code&gt;%eax&lt;/code&gt; registers with the number of boot device, addresses of the &lt;code&gt;prot_to_real&lt;/code&gt; and &lt;code&gt;real_to_prot&lt;/code&gt; function whih are helpers for transition between real/protected modes and address of the interrupt descriptor table. Now we can jump to the GNU GRUB kernel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="kd"&gt;LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;boot_dev&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;edx&lt;/span&gt;
&lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="nv"&gt;$prot_to_real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;edi&lt;/span&gt;
&lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="nv"&gt;$real_to_prot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;ecx&lt;/span&gt;
&lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="nv"&gt;$LOCAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;realidt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;eax&lt;/span&gt;
&lt;span class="nx"&gt;jmp&lt;/span&gt; &lt;span class="o"&gt;*%&lt;/span&gt;&lt;span class="nx"&gt;esi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The GNU GRUB kernel for &lt;a href="https://en.wikipedia.org/wiki/X86"&gt;x86&lt;/a&gt; entry is in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/kern/i386/pc/startup.S"&gt;grub-core/kern/i386/pc/startup.S&lt;/a&gt; assembly file. We are clearing space for the &lt;a href="https://en.wikipedia.org/wiki/.bss"&gt;BSS&lt;/a&gt; section and call the first function which is written in &lt;code&gt;C&lt;/code&gt; programming language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;call EXT_C(grub_main)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For this moment, we've been through the low-level part of the GNU GRUB. Of course, it is not the end of the assembly. But for now we have loaded kernel of the GNU GRUB into memory and transfered control to it which is writen mostly in C programming language. Well, let's continue.&lt;/p&gt;
&lt;h2&gt;GNU GRUB kernel&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;grub_main&lt;/code&gt; function defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/kern/main.c"&gt;grub-core/kern/main.c&lt;/a&gt; source code file and its main purpose is to initialize architecture-specific stuff, to load/parse configuration file and modules, to set some invironment variables and to load &lt;code&gt;normal&lt;/code&gt; mode. It starts from the call of the &lt;code&gt;grub_machine_init()&lt;/code&gt; function which is defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/kern/i386/pc/init.c"&gt;grub-core/kern/i386/pc/init.c&lt;/a&gt; source code file. The &lt;code&gt;grub_machine_init&lt;/code&gt; function initializes console by the call of the:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_console_init&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which just call of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_term_register_output&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;console&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;grub_console_term_output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;grub_term_register_input&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;console&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;grub_console_term_input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;functions. These functions takes two parameters: the first is name of a console and the second is pointer to a structure which contains pointer to the actions on a given console, like &lt;code&gt;putchar&lt;/code&gt;, &lt;code&gt;cls&lt;/code&gt; and etc. In the next time, when print-like function will be called, the GNU GRUB will go through a list of registered consoles and will call their print API. After this the &lt;code&gt;grub_machine_init()&lt;/code&gt; function initializes memory regions and intializes &lt;a href="https://en.wikipedia.org/wiki/Time_Stamp_Counter"&gt;Time stamp counter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After this we return to the &lt;code&gt;grub_main ()&lt;/code&gt; function which calls the &lt;code&gt;grub_load_config()&lt;/code&gt; function. As you can understand from the functio's name, it loads configuration file. The next step is loading of GNU GRUB modules which are represented by the &lt;a href="grub_load_config ();"&gt;ELF&lt;/a&gt; files in the &lt;code&gt;/boot/grub/arch&lt;/code&gt;. For example:&lt;/p&gt;
&lt;p&gt;&lt;img alt="grub-mod" src="http://s3.postimg.org/bvfh7uatf/elf.png" /&gt;&lt;/p&gt;
&lt;p&gt;After the GNU GRUB kernel will load modules, it sets &lt;code&gt;root&lt;/code&gt; and &lt;code&gt;prefix&lt;/code&gt; environment variables which are represent root device and prefix of GNU GRUB directory (by default it is &lt;code&gt;/boot/grub&lt;/code&gt;), parses configuration file, regisers four core command: &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;unset&lt;/code&gt; and &lt;code&gt;insmod&lt;/code&gt;. The last step of execution of the &lt;code&gt;grub_main ()&lt;/code&gt; function is the &lt;code&gt;grub_load_normal_mode ()&lt;/code&gt; function. This function defined in the same source code file as the &lt;code&gt;grub_main()&lt;/code&gt; function and it tries to load and execute the &lt;code&gt;normal&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;This module represents main module of GNU GRUB which starts to work after all of main low-level preparation. As we can read in the &lt;a href="http://www.gnu.org/software/grub/manual/grub.html#normal"&gt;documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In normal mode, commands, filesystem modules, and cryptography modules are automatically loaded, and the full GRUB script parser is available&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, the &lt;code&gt;normal&lt;/code&gt; module/command is responsible for the user menu, loading of modules which are defined in the GNU GRUB configuration file with &lt;code&gt;insmod&lt;/code&gt; command, handling of user input and transfering control to the real loader of an operating system kernel. Let's take a closer look on the &lt;code&gt;normal&lt;/code&gt; mode.&lt;/p&gt;
&lt;h2&gt;Normal mode&lt;/h2&gt;
&lt;p&gt;All code which is related to the &lt;code&gt;normal&lt;/code&gt; mode is located in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/normal"&gt;grub-core/normal&lt;/a&gt; directory. As well as all the modules of GNU GRUB, the &lt;code&gt;normal.mod&lt;/code&gt; has definition of the &lt;code&gt;GRUB_MOD_INIT&lt;/code&gt; an &lt;code&gt;GRUB_MOD_FINI&lt;/code&gt; macros which are responsible for a module initialization and finalization. The &lt;code&gt;normal.mod&lt;/code&gt; sets a couple of environment variables like target processor, colors, pager and etc. Also it register a set of command to clear screen, exit from normal mode and etc. In the end of the &lt;code&gt;grub_main()&lt;/code&gt; function we could see the call of the:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_command_execute&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;function which executes already registed command in the &lt;code&gt;GRUB_MOD_INIT("normal")&lt;/code&gt;. It looks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_register_command&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;normal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grub_cmd_normal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter normal mode.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, after the last step of the &lt;code&gt;grub_main()&lt;/code&gt; function, we will be in the &lt;code&gt;grub_cmd_normal()&lt;/code&gt; functio. This function enters to the &lt;code&gt;normal&lt;/code&gt; mode. Practically it means that it read configuration file of the GNU GRUB (&lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt;) to the &lt;code&gt;grub_menu_t&lt;/code&gt; type which represents menu of the GNU GRUB and renders menu. We will skip many parts of this, like how menu renders and how it is represented in the source code of the GNU GRUB, because its not related directly with bootloading. The interesting part for us is that &lt;code&gt;grub_normal_execute()&lt;/code&gt; function calls the &lt;code&gt;grub_show_menu()&lt;/code&gt; function from the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/normal/menu.c"&gt;grub-core/normal/menu.c&lt;/a&gt; source code file which in turn calls the &lt;code&gt;run_menu&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;run_menu&lt;/code&gt; function provides interruptible sleep until a menu item is selected and returns the selected menu item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;boot_entry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_menu&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;auto_boot&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the &lt;code&gt;run_menu()&lt;/code&gt; function will return index of selected menu item which is represented by the &lt;code&gt;grub_menu_entry&lt;/code&gt; structure, we need to execute this menu entry by the call of the &lt;code&gt;grub_menu_execute_entry&lt;/code&gt; function. This function takes two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Selected menu entry;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto_boot&lt;/code&gt; - shows that nothing was selected and timer is expired.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;grub_menu_execute_entry()&lt;/code&gt; function is big enough. It checks that an user selected submenu and renders it in this case, it checks that selected menu entry needs in authentication if we put something like &lt;code&gt;--users user1&lt;/code&gt; to a menu entry and etc. But the greatest interest for us is the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_script_execute_new_scope&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sourcecode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grub_errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GRUB_ERR_NONE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;grub_loader_is_loaded&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;grub_command_execute&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first function takes the body of the selected menu entry, count of arguments and arguments of the GNU GRUB function and tries to execute it. For example if a body of your menu entry will be like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;linux   /vmlinuz-linux root=UUID=4680b48e-595e-4d03-9115-2db79206e9f9 rw  quiet
echo    &amp;#39;Loading initial ramdisk ...&amp;#39;
initrd   /initramfs-linux.img
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;grub_cmd_linux()&lt;/code&gt;, &lt;code&gt;grub_cmd_initrd()&lt;/code&gt; and the &lt;code&gt;grub_cmd_echo()&lt;/code&gt; functions will be called. After the GNU GRUB will handle script we check an error and that loader is loaded. If both conditions will be good, we execute &lt;code&gt;boot&lt;/code&gt; commands which will start to boot a kernel. Now we are stopped on the last step - loading of the Linux kernel.&lt;/p&gt;
&lt;h2&gt;Ok, finally lets load it&lt;/h2&gt;
&lt;p&gt;A loader will be loaded during &lt;code&gt;linux&lt;/code&gt; command execution in the &lt;code&gt;grub_cmd_linux()&lt;/code&gt; function. This function is defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/loader/i386/linux.c"&gt;grub-core/loader/i386/linux.c&lt;/a&gt; source code file. If you will look on the definition of the &lt;code&gt;linux&lt;/code&gt; command in your &lt;code&gt;/boot/grub/grub.cfg&lt;/code&gt; configuration file, you will see that this command takes path of the Linux kernel image as first argument. So, the &lt;code&gt;grub_cmd_linux()&lt;/code&gt; function starts from the check of the number of command line arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;grub_error&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GRUB_ERR_BAD_ARGUMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filename expected&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;goto&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If we have no command line arguments, print error and go to &lt;code&gt;fail&lt;/code&gt; label. After this we try to open and read the header of the Linux kernel image by the given path in the first command line argument. We are reading the Linux kernel image to the &lt;code&gt;struct linux_kernel_header lh&lt;/code&gt; structure which defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/include/grub/i386/linux.h"&gt;include/grub/i386/linux.h&lt;/a&gt; header file and contains fields which are mapped to the &lt;a href="https://www.kernel.org/doc/Documentation/x86/boot.txt"&gt;Linux boot protocol v 2.10&lt;/a&gt;. After we have read the header of the Linux kernel image, we make some checks for magic number (&lt;code&gt;0xaa55&lt;/code&gt;), that &lt;code&gt;setup_sects&lt;/code&gt; field is not greater than &lt;code&gt;64&lt;/code&gt; and etc. As we finished with checks, we need to calculate size of the Linux kernel image and read it full. After this we need to fill/calculate fields which are marked in the Linux boot protocol as &lt;code&gt;write&lt;/code&gt;. There fields are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code32_start&lt;/code&gt; - entry point of the Linux kernel in &lt;a href="https://en.wikipedia.org/wiki/Protected_mode"&gt;protected mode&lt;/a&gt;. It is not neccecary, but can be updated for realocation;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ramdisk_image&lt;/code&gt; - the 32-bit linear address of the initial ramdisk or ramfs;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ramdisk_image_size&lt;/code&gt; - the size of the initial ramdisk or ramfs;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heap_end_ptr&lt;/code&gt; - the offset of the end of the setup stack/heap, minus &lt;code&gt;0x0200&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loadflags&lt;/code&gt; - bitmask which provides boot related flags.&lt;/li&gt;
&lt;li&gt;and etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, we are setting the type of the bootloader which is the GNU GRUB (&lt;code&gt;0x72&lt;/code&gt;) in our case, offset for the Linux kernel command line, &lt;code&gt;ramdisk_image&lt;/code&gt; and &lt;code&gt;ramdisk_size&lt;/code&gt; to zero (these fields will be filled in the &lt;code&gt;grub_cmd_initrd()&lt;/code&gt;) and other fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;linux_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type_of_loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GRUB_LINUX_BOOT_LOADER_TYPE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;linux_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cl_magic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GRUB_LINUX_CL_MAGIC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;linux_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cl_offset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;linux_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ramdisk_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;linux_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ramdisk_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;linux_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heap_end_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GRUB_LINUX_HEAP_END_OFFSET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;linux_params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadflags&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;GRUB_LINUX_FLAG_CAN_USE_HEAP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After we have load the Linux kernel image into memory and have filled Linux kernel header with constructed command line, we check errors and set callback function for the Linux kernel booting. In our case this function will be &lt;code&gt;grub_linux_boot()&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grub_errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GRUB_ERR_NONE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;grub_loader_set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grub_linux_boot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grub_linux_unload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;loaded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where the &lt;code&gt;grub_loader_set()&lt;/code&gt; function sets:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_loader_set&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;grub_err_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="kt"&gt;grub_err_t&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;unload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;grub_loader_boot_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's return to the &lt;code&gt;grub_menu_execute_entry()&lt;/code&gt; function. We have stopped at the following code there:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;grub_script_execute_new_scope&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;sourcecode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grub_errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GRUB_ERR_NONE&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;grub_loader_is_loaded&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;grub_command_execute&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;boot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line of code is executed and as we just saw, this function reads the body of a selected menu entry and executes commands from it. After the &lt;code&gt;grub_script_execute_new_scope&lt;/code&gt; will be finished, at least &lt;code&gt;linux&lt;/code&gt; and &lt;code&gt;initrd&lt;/code&gt; commands of GNU GRUB will be executed. This means that the header of the Linux kernel and &lt;a href="https://en.wikipedia.org/wiki/Initrd"&gt;initrd&lt;/a&gt; will be loaded into the memory and fields of the Linux kernel header are parsed and needed fields of it will be calculated and filled. If everything is ok, the &lt;code&gt;if&lt;/code&gt; condition after the call of the &lt;code&gt;grub_script_execute_new_scope()&lt;/code&gt; function will return true and the &lt;code&gt;boot&lt;/code&gt; command will be execute.&lt;/p&gt;
&lt;p&gt;The entry of the &lt;code&gt;boot&lt;/code&gt; command is the &lt;code&gt;grub_cmd_boot()&lt;/code&gt; function which defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/commands/boot.c"&gt;grub-core/commands/boot.c&lt;/a&gt; source code file. Besides a couple of check, the point of the &lt;code&gt;grub_cmd_boot()&lt;/code&gt; function is to call &lt;code&gt;boot&lt;/code&gt; callback function which is set by the loader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grub_loader_boot_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our case, this callback function was set in the &lt;code&gt;grub_loader_set()&lt;/code&gt; function and this function is &lt;code&gt;grub_linux_boot()&lt;/code&gt; function which defined in the &lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/grub-core/loader/i386/linux.c"&gt;grub-core/loader/i386/linux.c&lt;/a&gt; source code file. The &lt;code&gt;grub_linux_boot()&lt;/code&gt; function sets video mode which is depends on values of &lt;code&gt;video&lt;/code&gt; parameters from the Linux kernel header, sets the Linux kernel command line offset, fills register and start&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;edi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;esi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real_mode_target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;esp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real_mode_target&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;code32_start&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;grub_relocator32_boot&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;relocator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The relocator of the GNU GRUB is big piece of code which prepares all registers to the state which is good for the Linux kernel, prepares environment to the actual processor mode which depends on relocator type (may be in real, protected or long mode), calculates base physical address of the Linux kernel and jumps on it.&lt;/p&gt;
&lt;p&gt;From this moment we are in the kernel!&lt;/p&gt;
&lt;p&gt;That's all.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We saw how the GNU GRUB loads the Linux kernel in this post. Of course, it is not fully cover booting process of the Linux kernel and it also does not cover full aspects of the GNU GRUB. We have missed some things like how does GRUB manage filesystem related work, memory management related stuff, styles and appereance of menu and etc. This is not real to cover all of this topics and especially full source code of the such project like the GNU GRUB in one post. But I hope, you'll like it and you will research other boot related things with yourself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Questions/Suggestions&lt;/strong&gt;: Feel free about any questions or suggestions by pinging me at twitter &lt;a href="https://twitter.com/0xAX"&gt;@0xAX&lt;/a&gt;, adding an issue or just drop me an &lt;a href="kuleshovmail@gmail.com"&gt;email&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note that English is not my first language and I am really sorry for any inconvenience. If you found any mistakes please send me PR to &lt;a href="https://github.com/0xAX/0xAX.github.io/tree/source"&gt;0xax.github.com&lt;/a&gt; or just drop me an &lt;a href="kuleshovmail@gmail.com"&gt;email&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.gnu.org/software/grub/"&gt;GNU GRUB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://git.savannah.gnu.org/cgit/grub.git/tree/"&gt;GNU GRUB git web interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Assembly_language"&gt;assembly programming language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://0xax.gitbooks.io/linux-insides/content/index.html"&gt;linux-insides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Initrd"&gt;initrd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format"&gt;ELF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface"&gt;Advanced Configuration and Power Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Master_boot_record"&gt;Master boot record&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Partition_table"&gt;partition table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/BIOS_parameter_block"&gt;BIOS parameter block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Logical_block_addressing"&gt;LBA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Cylinder-head-sector"&gt;Cylinders, Heads, Sectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/.bss"&gt;BSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Protected_mode"&gt;protected mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wiki.osdev.org/Global_Descriptor_Table"&gt;Global Descriptor Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Interrupt_descriptor_table"&gt;interrupt descriptor table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Time_Stamp_Counter"&gt;Time stamp counter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.kernel.org/doc/Documentation/x86/boot.txt"&gt;Linux kernel boot protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="bootloader"></category></entry><entry><title>Say hello to x86_64 Assembly [part 8]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-8.html" rel="alternate"></link><published>2014-12-01T00:00:00+06:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-12-01:0xax.github.com/say-hello-to-x86_64-assembly-part-8.html</id><summary type="html">&lt;p&gt;It is eight and final part of Say hello to x86_64 Assembly and here we will take a look on how to work with non-integer numbers in assembler. There are a couple of ways how to work with floating point data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fpu&lt;/li&gt;
&lt;li&gt;sse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;First of all let's look how floating point number stored in memory. There are three floating point data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single-precision&lt;/li&gt;
&lt;li&gt;double-precision&lt;/li&gt;
&lt;li&gt;double-extended precision&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As Intel's 64-ia-32-architecture-software-developer-vol-1-manual described:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;The data formats for these data types correspond directly to formats specified in the IEEE Standard 754 for Binary Floating-Point Arithmetic.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Single-precision floating-point float point data presented in memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sign - 1 bit&lt;/li&gt;
&lt;li&gt;exponent - 8 bits&lt;/li&gt;
&lt;li&gt;mantissa - 23 bits&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So for example if we have following number:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;| sign  | exponent | mantissa
|-------|----------|-------------------------
| 0     | 00001111 | 110000000000000000000000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Exponent is either an 8 bit signed integer from −128 to 127 or an 8 bit unsigned integer from 0 to 255. Sign bit is zero, so we have positive number. Exponent is 00001111b or 15 in decimal. For single-precision displacement is 127, it means that we need to calculate exponent - 127 or 15 - 127 = -112. Since the normalized binary integer part of the mantissa is always equal to one, then in the mantissa is recorded only its fractional part, so mantissa or our number is 1,110000000000000000000000. Result value will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;value = mantissa * 2^-112
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Double precision number is 64 bit of memory where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sign - 1 bit&lt;/li&gt;
&lt;li&gt;exponent - 11 bit&lt;/li&gt;
&lt;li&gt;mantissa - 52 bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Result number we can get by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;value = (-1)^sign * (1 + mantissa / 2 ^ 52) * 2 ^ exponent - 1023)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Extended precision is 80 bit numbers where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sign - 1 bit&lt;/li&gt;
&lt;li&gt;exponent - 15 bit&lt;/li&gt;
&lt;li&gt;mantissa - 112 bit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read more about it - &lt;a href="https://en.wikipedia.org/wiki/Extended_precision"&gt;here&lt;/a&gt;. Let's look at simple example.&lt;/p&gt;
&lt;h2&gt;x87 FPU&lt;/h2&gt;
&lt;p&gt;The x87 Floating-Point Unit (FPU) provides high-performance floating-point processing. It supports the floating-point, integer, and packed BCD integer data types and the floating-point processing algorithms. x87 provides following instructions set:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data transfer instructions&lt;/li&gt;
&lt;li&gt;Basic arithmetic instructions&lt;/li&gt;
&lt;li&gt;Comparison instructions&lt;/li&gt;
&lt;li&gt;Transcendental instructions&lt;/li&gt;
&lt;li&gt;Load constant instructions&lt;/li&gt;
&lt;li&gt;x87 FPU control instructions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course we will not see all instructions here provided by x87, for additional information see 64-ia-32-architecture-software-developer-vol-1-manual Chapter 8. There are a couple of data transfer instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FDL&lt;/code&gt; - load floating point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FST&lt;/code&gt; - store floating point (in ST(0) register)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FSTP&lt;/code&gt; - store floating point and pop (in ST(0) register)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Arithmetic instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FADD&lt;/code&gt; - add floating point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIADD&lt;/code&gt; - add integer to floating point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FSUB&lt;/code&gt; - subtract floating point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FISUB&lt;/code&gt; - subtract integer from floating point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FABS&lt;/code&gt; - get absolute value&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIMUL&lt;/code&gt; - multiply integer and floating point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIDIV&lt;/code&gt; - device integer and floating point&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and etc... FPU has eight 10 byte registers organized in a ring stack. Top of the stack - register ST(0), other registers are ST(1), ST(2) ... ST(7). We usually uses it when we are working with floating point data.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .data
    x dw 1.0

fld dword [x]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;pushes value of x to this stack. Operator can be 32bit, 64bit or 80bit. It works as usual stack, if we push another value with fld, x value will be in ST(1) and new value will be in ST(0). FPU instructions can use these registers, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;;
;; adds st0 value to st3 and saves it in st0
;;
fadd st0, st3

;;
;; adds x and y and saves it in st0
;;
fld dword [x]
fld dword [y]
fadd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's look on simple example. We will have circle radius and calculate circle square and print it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;extern printResult

section .data
        radius    dq  1.7
        result    dq  0

        SYS_EXIT  equ 60
        EXIT_CODE equ 0

global _start
section .text

_start:
        fld qword [radius]
        fld qword [radius]
        fmul

        fldpi
        fmul
        fstp qword [result]

        mov rax, 0
        movq xmm0, [result]
        call printResult

        mov rax, SYS_EXIT
        mov rdi, EXIT_CODE
        syscall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try to understand how it works: First of all there is data section with predefined radius data and result which we will use for storing result. After this 2 constants for calling exit system call. Next we see entry point of program - _start. There we stores radius value in st0 and st1 with fld instruction and multiply this two values with fmul instruction. After this operations we will have result of radius on radius multiplication in st0 register. Next we load The number π with fldpi instruction to the st0 register, and after it radius * radius value will be in st1 register. After this execute multiplication with fmul on st0 (pi) and st1 (value of radius * radius), result will be in st0 register. Ok, now we have circle square in st0 register and can extract it with fstp instruction to the result. Next point is to pass result to the C function and call it. Remember we call C function from assembly code in previous blog post. We need to know x86_64 calling convention. In usual way we pass function parameters through registers rdi (arg1), rsi (arg2) and etc..., but here is floating point data. There is special registers: xmm0 - xmm15 provided by sse. First of all we need to put number of xmmN register to rax register (0 for our case), and put result to xmm0 register. Now we can call C function for printing result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;printResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;printResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Circle radius is - %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can build it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;gcc&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;circle_fpu_87c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;
    &lt;span class="n"&gt;nasm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;elf64&lt;/span&gt; &lt;span class="n"&gt;circle_fpu_87&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;circle_fpu_87&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;
    &lt;span class="n"&gt;ld&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linker&lt;/span&gt; &lt;span class="sr"&gt;/lib64/&lt;/span&gt;&lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;so&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;circle_fpu_87&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;testFloat1&lt;/span&gt;

&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="o"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="n"&gt;testFloat1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And run:&lt;/p&gt;
&lt;p&gt;&lt;img alt="result" src="http://1.bp.blogspot.com/-yBn1V2mJ3no/VJgkuudOQRI/AAAAAAAAAIc/rqVNUpX87Og/s1600/Screenshot%2Bfrom%2B2014-12-22%2B20%3A02%3A56.png" /&gt;&lt;/p&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Say hello to x86_64 Assembly [part 7]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-7.html" rel="alternate"></link><published>2014-10-10T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-10-10:0xax.github.com/say-hello-to-x86_64-assembly-part-7.html</id><summary type="html">&lt;p&gt;It is seventh part of Say hello to x86_64 Assembly and here we will look on how we can use C together with assembler.&lt;/p&gt;
&lt;p&gt;Actually we have 3 ways to use it together:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call assembly routines from C code&lt;/li&gt;
&lt;li&gt;Call c routines from assembly code&lt;/li&gt;
&lt;li&gt;Use inline assembly in C code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's write 3 simple Hello world programs which shows us how to use assembly and C together.&lt;/p&gt;
&lt;h2&gt;Call assembly from C&lt;/h2&gt;
&lt;p&gt;First of all let's write simple C program like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printHelloWorld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we can see C code which defines two variables: our Hello world string which we will write to stdout and length of this string. Next we call printHelloWorld assembly function with this 2 variables as parameters. As we use x86_64 Linux, we must know x86_64 linux calling convetions, so we will know how to write printHelloWorld function, how to get incoming parameters and etc... When we call function first six parameters passes through rdi, rsi, rdx, rcx, r8 and r9 general purpose registers, all another through the stack. So we can get first and second parameter from rdi and rsi registers and call write syscall and than return from function with ret instruction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;global printHelloWorld

section .text
printHelloWorld:
        ;; 1 arg
        mov r10, rdi
        ;; 2 arg
        mov r11, rsi
        ;; call write syscall
        mov rax, 1
        mov rdi, 1
        mov rsi, r10
        mov rdx, r11
        syscall
        ret
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can build it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;nasm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;elf64&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asm&lt;/span&gt;
    &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Inline assembly&lt;/h2&gt;
&lt;p&gt;The following method is to write assembly code directly in C code. There is special syntax for this. It has general view:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;asm [volatile] (&amp;quot;assembly code&amp;quot; : output operand : input operand : clobbers);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As we can read in gcc documentation volatile keyword means:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;The typical use of Extended asm statements is to manipulate input values to produce output values. However, your asm statements may also produce side effects. If so, you may need to use the volatile qualifier to disable certain optimizations
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each operand is described by constraint string followed by C expression in parentheses. There are a number of constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; - Kept variable value in general purpose register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g&lt;/code&gt; - Any register, memory or immediate integer operand is allowed, except for registers that are not general registers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; - Floating point register&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; - A memory operand is allowed, with any kind of address that the machine supports in general.&lt;/li&gt;
&lt;li&gt;and etc...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So our hello world will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;__asm__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;movq $1, %%rax &lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;movq $1, %%rdi &lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;movq %1, %%rsi &lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;movl %2, %%edx &lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;syscall&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;=g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;g&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we can see the same 2 variables as in previous example and inline assembly definition. First of all we put 1 to rax and rdi registers (write system call number, and stdout) as we did it in our plain assembly hello world. Next we do similar operation with rsi and rdi registers but first operands starts with % symbol instead $. It means str is the output operand referred by %1 and len second output operand referred by %2, so we put values of str and len to rsi and rdi with %n notation, where n is number of output operand. Also there is %% prefixed to the register name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    This helps GCC to distinguish between the operands and registers. operands have a single % as prefix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can build it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Call C from assembly&lt;/h2&gt;
&lt;p&gt;And the last method is to call C function from assembly code. For example we have following simple C code with one function which just prints Hello world:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can define this function as extern in our assembly code and call it with call instruction as we do it much times in previous posts:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;global _start

extern print

section .text

_start:
        call print

        mov rax, 60
        mov rdi, 0
        syscall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Build it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;gcc&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;
    &lt;span class="n"&gt;nasm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;elf64&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;
    &lt;span class="n"&gt;ld&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linker&lt;/span&gt; &lt;span class="sr"&gt;/lib64/&lt;/span&gt;&lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;so&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;casm&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and now we can run our third hello world.&lt;/p&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Say hello to x86_64 Assembly [part 6]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-6.html" rel="alternate"></link><published>2014-10-01T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-10-01:0xax.github.com/say-hello-to-x86_64-assembly-part-6.html</id><summary type="html">&lt;p&gt;It is sixth part of Say hello to x86_64 Assembly and here we will look on AT&amp;amp;T assembler syntax. Previously we used nasm assembler in all parts, but there are some another assemblers with different syntax, fasm, yasm and others. As i wrote above we will look on gas (GNU assembler) and difference between it's syntax and nasm. GCC uses GNU assembler, so if you see at assembler output for simple hello world:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will see following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;file&lt;/span&gt;   &lt;span class="s2"&gt;&amp;quot;test.c&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;rodata&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LC0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World\n&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;globl&lt;/span&gt;  &lt;span class="nx"&gt;main&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;   &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;
&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LFB0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cfi_startproc&lt;/span&gt;
    &lt;span class="nx"&gt;pushq&lt;/span&gt;   &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rbp&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cfi_def_cfa_offset&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cfi_offset&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;
    &lt;span class="nx"&gt;movq&lt;/span&gt;    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rsp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rbp&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cfi_def_cfa_register&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="nx"&gt;$15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;edx&lt;/span&gt;
    &lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LC0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;esi&lt;/span&gt;
    &lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="nx"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;edi&lt;/span&gt;
    &lt;span class="nx"&gt;call&lt;/span&gt;    &lt;span class="nx"&gt;write&lt;/span&gt;
    &lt;span class="nx"&gt;movl&lt;/span&gt;    &lt;span class="nx"&gt;$0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;eax&lt;/span&gt;
    &lt;span class="nx"&gt;popq&lt;/span&gt;    &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nx"&gt;rbp&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cfi_def_cfa&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
    &lt;span class="nx"&gt;ret&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cfi_endproc&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LFE0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;   &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ident&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;GCC: (Ubuntu 4.9.1-16ubuntu6) 4.9.1&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;section&lt;/span&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GNU&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;progbits&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looks different then nasm Hello world, let's look on some differences.&lt;/p&gt;
&lt;h1&gt;AT&amp;amp;T syntax&lt;/h1&gt;
&lt;h2&gt;Sections&lt;/h2&gt;
&lt;p&gt;I don't know how about you, but when I start to write assembler program, usually I'm starting from sections definition. Let's look on simple example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.data&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;initialized&lt;/span&gt; &lt;span class="no"&gt;data&lt;/span&gt; &lt;span class="no"&gt;definition&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt;
&lt;span class="na"&gt;.text&lt;/span&gt;
    &lt;span class="na"&gt;.global&lt;/span&gt; &lt;span class="no"&gt;_start&lt;/span&gt;

&lt;span class="nl"&gt;_start:&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="no"&gt;routine&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can note two little differences here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Section definition starts with . symbol&lt;/li&gt;
&lt;li&gt;Main routine defines with .globl instead global as we do it in nasm&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also gas uses another directives for data defintion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;.section&lt;/span&gt; &lt;span class="no"&gt;.data&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt; &lt;span class="nf"&gt;byte&lt;/span&gt;
    &lt;span class="nl"&gt;var1:&lt;/span&gt; &lt;span class="na"&gt;.byte&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt; &lt;span class="nf"&gt;byte&lt;/span&gt;
    &lt;span class="nl"&gt;var2:&lt;/span&gt; &lt;span class="na"&gt;.word&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt; &lt;span class="nf"&gt;byte&lt;/span&gt;
    &lt;span class="nl"&gt;var3:&lt;/span&gt; &lt;span class="na"&gt;.int&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;8&lt;/span&gt; &lt;span class="nf"&gt;byte&lt;/span&gt;
    &lt;span class="nl"&gt;var4:&lt;/span&gt; &lt;span class="na"&gt;.quad&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;16&lt;/span&gt; &lt;span class="nf"&gt;byte&lt;/span&gt;
    &lt;span class="nl"&gt;var5:&lt;/span&gt; &lt;span class="na"&gt;.octa&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;assembles&lt;/span&gt; &lt;span class="no"&gt;each&lt;/span&gt; &lt;span class="no"&gt;string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;with&lt;/span&gt; &lt;span class="no"&gt;no&lt;/span&gt; &lt;span class="no"&gt;automatic&lt;/span&gt; &lt;span class="no"&gt;trailing&lt;/span&gt; &lt;span class="no"&gt;zero&lt;/span&gt; &lt;span class="no"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="no"&gt;into&lt;/span&gt; &lt;span class="no"&gt;consecutive&lt;/span&gt; &lt;span class="no"&gt;addresses&lt;/span&gt;
    &lt;span class="nl"&gt;str1:&lt;/span&gt; &lt;span class="na"&gt;.asci&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;just&lt;/span&gt; &lt;span class="no"&gt;like&lt;/span&gt; &lt;span class="no"&gt;.ascii&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;but&lt;/span&gt; &lt;span class="no"&gt;each&lt;/span&gt; &lt;span class="no"&gt;string&lt;/span&gt; &lt;span class="no"&gt;is&lt;/span&gt; &lt;span class="no"&gt;followed&lt;/span&gt; &lt;span class="no"&gt;by&lt;/span&gt; &lt;span class="no"&gt;a&lt;/span&gt; &lt;span class="no"&gt;zero&lt;/span&gt; &lt;span class="no"&gt;byte&lt;/span&gt;
    &lt;span class="nl"&gt;str2:&lt;/span&gt; &lt;span class="na"&gt;.asciz&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="nf"&gt;Copy&lt;/span&gt; &lt;span class="no"&gt;the&lt;/span&gt; &lt;span class="no"&gt;characters&lt;/span&gt; &lt;span class="no"&gt;in&lt;/span&gt; &lt;span class="no"&gt;str&lt;/span&gt; &lt;span class="no"&gt;to&lt;/span&gt; &lt;span class="no"&gt;the&lt;/span&gt; &lt;span class="no"&gt;object&lt;/span&gt; &lt;span class="no"&gt;file&lt;/span&gt;
    &lt;span class="nl"&gt;str3:&lt;/span&gt; &lt;span class="na"&gt;.string&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Operands order
When we write assembler program with nasm, we have following general syntax for data manipulation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mov destination, source
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With GNU assembler we have back order i.e.:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mov source, destination
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;;
;; nasm syntax
;;
mov rax, rcx

//
// gas syntax
//
mov %rcx, %rax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also you can not here that registers starts with % symbol. If you're using direct operands, need to use &lt;code&gt;$&lt;/code&gt; symbol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;movb $10, %rax
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Size of operands and operation syntax&lt;/h2&gt;
&lt;p&gt;Sometimes when we need to get part of memory, for example first byte of 64 register, we used following syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mov ax, word [rsi]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is another way for such operations in gas. We don't define size in operands but in instruction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;movw (%rsi), %ax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;GNU assembler has 6 postfixes for operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; - 1 byte operands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt; - 2 bytes operands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; - 4 bytes operands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;q&lt;/code&gt; - 8 bytes operands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t&lt;/code&gt; - 10 bytes operands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; - 16 bytes operands&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This rule is not only mov instruction, but also for all another like addl, xorb, cmpw and etc...&lt;/p&gt;
&lt;h2&gt;Memory access&lt;/h2&gt;
&lt;p&gt;You can note that we used () brackets in previous example instead [] in nasm example. To dereference values in parentheses are used GAS: (%rax), for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;movq -8(%rbp),%rdi
movq 8(%rbp),%rdi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Jumps&lt;/h2&gt;
&lt;p&gt;GNU assembler supports following operators for far functions call and jumps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;lcall &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;section&lt;/span&gt;&lt;span class="x"&gt;, &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;offset&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Far jump - a jump to an instruction located in a different segment than the current code segment but at the same privilege level, sometimes referred to as an intersegment jump.&lt;/p&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;p&gt;GNU assembler supports 3 types of comments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    # - single line comments
    // - single line comments
    /* */ - for multiline comments
&lt;/pre&gt;&lt;/div&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Say hello to x86_64 Assembly [part 5]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-5.html" rel="alternate"></link><published>2014-09-20T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-09-20:0xax.github.com/say-hello-to-x86_64-assembly-part-5.html</id><summary type="html">&lt;p&gt;It is a fifth part of Say hello to x86_64 Assembly and here we will look at macros. It will not be blog post about x86_64, mainly it will be about nasm assembler and it's preprocessor. If you're interesting in it read next.&lt;/p&gt;
&lt;h2&gt;Macros&lt;/h2&gt;
&lt;p&gt;NASM supports two form of macro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;single-line&lt;/li&gt;
&lt;li&gt;multiline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All single-line macro must start from %define directive. It form is following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%define&lt;/span&gt; &lt;span class="n"&gt;macro_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parameter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nasm macro behaves and looks very similar as in C. For example, we can create following single-line macro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%define&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="nf"&gt;%define&lt;/span&gt; &lt;span class="n"&gt;cliArg1&lt;/span&gt; &lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and than use it in code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;;
;; argc will be expanded to rsp + 8
;;
mov rax, [argc]
cmp rax, 3
jne .mustBe3args
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Multiline macro starts with %macro nasm directive and end with %endmacro. It general form is following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%macro&lt;/span&gt; &lt;span class="n"&gt;number_of_parameters&lt;/span&gt;
    &lt;span class="n"&gt;instruction&lt;/span&gt;
    &lt;span class="n"&gt;instruction&lt;/span&gt;
    &lt;span class="n"&gt;instruction&lt;/span&gt;
&lt;span class="nf"&gt;%endmacro&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%macro&lt;/span&gt; &lt;span class="n"&gt;bootstrap&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
          &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt;
          &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;esp&lt;/span&gt;
&lt;span class="nf"&gt;%endmacro&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And we can use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;_start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bootstrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example let's look at PRINT macro:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;%macro&lt;/span&gt; &lt;span class="n"&gt;PRINT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;pusha&lt;/span&gt;
    &lt;span class="n"&gt;pushf&lt;/span&gt;
    &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%astr&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%str&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%strln&lt;/span&gt; &lt;span class="n"&gt;equ&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;-%&lt;/span&gt;&lt;span class="nf"&gt;%str&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%astr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_syscall_write&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%strln&lt;/span&gt;
&lt;span class="n"&gt;popf&lt;/span&gt;
&lt;span class="n"&gt;popa&lt;/span&gt;
&lt;span class="nf"&gt;%endmacro&lt;/span&gt;

&lt;span class="nf"&gt;%macro&lt;/span&gt; &lt;span class="n"&gt;_syscall_write&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%str&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="nf"&gt;%strln&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;
&lt;span class="nf"&gt;%endmacro&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try to go through it macro and understand how it works: At first line we defined PRINT macro with one parameter. Than we push all general registers (with pusha instruction) and flag register with (with pushf instruction). After this we jump to %%astr label. Pay attention that all labels which defined in macro must start with %%. Now we move to __syscall_write macro with 2 parameter. Let's look on __syscall_write implementation. You can remember that we use write system call in all previous posts for printing string to stdout. It looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;; write syscall number
mov rax, 1
;; file descriptor, standard output
mov rdi, 1
;; message address
mov rsi, msg
;; length of message
mov rdx, 14
;; call write syscall
syscall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In our __syscall_write macro we define first two instruction for putting 1 to rax (write system call number) and rdi (stdout file descriptor). Than we put %%str to rsi register (pointer to string), where %%str is local label to which is get first parameter of PRINT macro (pay attention that macro parameter access by $parameter_number) and end with 0 (every string must end with zero). And %%strlen which calculates string length. After this we call system call with syscall instruction and that's all.&lt;/p&gt;
&lt;p&gt;Now we can use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PRINT&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Useful standard macros&lt;/h2&gt;
&lt;p&gt;NASM supports following standard macros:&lt;/p&gt;
&lt;h2&gt;STRUC&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;STRUC&lt;/code&gt; and &lt;code&gt;ENDSTRUC&lt;/code&gt; for data structure defintion. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;struc person
   name: resb 10
   age:  resb 1
endstruc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we can make instance of our structure:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .data
    p: istruc person
      at name db &amp;quot;name&amp;quot;
      at age  db 25
    iend

section .text
_start:
    mov rax, [p + person.name]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;%include&lt;/h2&gt;
&lt;p&gt;We can include other assembly files and jump to there labels or call functions with %include directive.&lt;/p&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Say hello to x86_64 Assembly [part 4]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-4.html" rel="alternate"></link><published>2014-09-01T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-09-01:0xax.github.com/say-hello-to-x86_64-assembly-part-4.html</id><summary type="html">&lt;p&gt;Some time ago i started to write series of blog posts about assembly programming for x86_64. You can find it by asm tag. Unfortunately i was busy last time and there were not new post, so today I continue to write posts about assembly, and will try to do it every week.&lt;/p&gt;
&lt;p&gt;Today we will look at strings and some strings operations. We still use nasm assembler, and linux x86_64.&lt;/p&gt;
&lt;h2&gt;Reverse string&lt;/h2&gt;
&lt;p&gt;Of course when we talk about assembly programming language we can't talk about string data type, actually we're dealing with array of bytes. Let's try to write simple example, we will define string data and try to reverse and write result to stdout. This tasks seems pretty simple and popular when we start to learn new programming language. Let's look on implementation.&lt;/p&gt;
&lt;p&gt;First of all, I define initialized data. It will be placed in data section (You can read about sections in part):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .data
        SYS_WRITE equ 1
        STD_OUT   equ 1
        SYS_EXIT  equ 60
        EXIT_CODE equ 0

        NEW_LINE db 0xa
        INPUT db &amp;quot;Hello world!&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we can see four constants:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SYS_WRITE&lt;/code&gt; - 'write' syscall number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STD_OUT&lt;/code&gt; - stdout file descriptor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SYS_EXIT&lt;/code&gt; - 'exit' syscall number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXIT_CODE&lt;/code&gt; - exit code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;syscall list you can find - here. Also there defined:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NEW_LINE&lt;/code&gt; - new line (\n) symbol&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INPUT&lt;/code&gt; - our input string, which we will reverse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next we define bss section for our buffer, where we will put reversed string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .bss
        OUTPUT resb 12
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok we have some data and buffer where to put result, now we can define text section for code. Let's start from main _start routine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;_start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INPUT&lt;/span&gt;
        &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;rcx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rcx&lt;/span&gt;
        &lt;span class="n"&gt;cld&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;$&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
        &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;calculateStrLength&lt;/span&gt;
        &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;
        &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;
        &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="n"&gt;reverseStr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here are some new things. Let's see how it works: First of all we put INPUT address to si register at line 2, as we did for writing to stdout and write zeros to rcx register, it will be counter for calculating length of our string. At line 4 we can see cld operator. It resets df flag to zero. We need in it because when we will calculate length of string, we will go through symbols of this string, and if df flag will be 0, we will handle symbols of string from left to right. Next we call calculateStrLength function. I missed line 5 with mov rdi, $ + 15 instruction, i will tell about it little later. And now let's look at calculateStrLength implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;calculateStrLength&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;
        &lt;span class="nx"&gt;cmp&lt;/span&gt; &lt;span class="kr"&gt;byte&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;rsi&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;yes&lt;/span&gt; &lt;span class="nx"&gt;exit&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;
        &lt;span class="nx"&gt;je&lt;/span&gt; &lt;span class="nx"&gt;exitFromRoutine&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt; &lt;span class="kr"&gt;byte&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;rsi&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;al&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="nx"&gt;rsi&lt;/span&gt;
        &lt;span class="nx"&gt;lodsb&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;symbol&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;
        &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;rax&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="nx"&gt;increase&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;
        &lt;span class="nx"&gt;inc&lt;/span&gt; &lt;span class="nx"&gt;rcx&lt;/span&gt;
        &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="nx"&gt;loop&lt;/span&gt; &lt;span class="nx"&gt;again&lt;/span&gt;
        &lt;span class="nx"&gt;jmp&lt;/span&gt; &lt;span class="nx"&gt;calculateStrLength&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can understand by it's name, it just calculates length of INPUT string and store result in rcx register. First of all we check that rsi register doesn't point to zero, if so this is the end of string and we can exit from function. Next is lodsb instruction. It's simple, it just put 1 byte to al register (low part of 16 bit ax) and changes rsi pointer. As we executed cld instruction, lodsb everytime will move rsi to one byte from left to right, so we will move by string symbols. After it we push rax value to stack, now it contains symbol from our string (lodsb puts byte from si to al, al is low 8 bit of rax). Why we did push symbol to stack? You must remember how stack works, it works by principle LIFO (last input, first output). It is very good for us. We will take first symbol from si, push it to stack, than second and so on. So there will be last symbol of string at the stack top. Than we just pop symbol by symbol from stack and write to OUTPUT buffer. After it we increment our counter (rcx) and loop again to the start of routine.&lt;/p&gt;
&lt;p&gt;Ok, we pushed all symbols from string to stack, now we can jump to exitFromRoutine return to _start there. How to do it? We have ret instruction for this. But if code will be like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exitFromRoutine:
        ;; return to _start
        ret
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will not work. Why? It is tricky. Remember we called calculateStrLength at _start. What occurs when we call a function? First of all function's parameters pushes to stack from right to left. After it return address pushes to stack. So function will know where to return after end of execution. But look at calculateStrLength, we pushed symbols from our string to stack and now there is no return address of stack top and function doesn't know where to return. How to be with it. Now we must take a look to the weird instruction before call:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    mov rdi, $ + 15
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First all:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; - returns position in memory of string where $ defined&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$$&lt;/code&gt; - returns position in memory of current section start&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we have position of mov rdi, $ + 15, but why we add 15 here? Look, we need to know position of next line after calculateStrLength. Let's open our file with objdump util:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;objdump -D reverse

reverse:     file format elf64-x86-64

Disassembly of section .text:

00000000004000b0 &amp;lt;_start&amp;gt;:
  4000b0:   48 be 41 01 60 00 00    movabs $0x600141,%rsi
  4000b7:   00 00 00
  4000ba:   48 31 c9                xor    %rcx,%rcx
  4000bd:   fc                      cld
  4000be:   48 bf cd 00 40 00 00    movabs $0x4000cd,%rdi
  4000c5:   00 00 00
  4000c8:   e8 08 00 00 00          callq  4000d5 &amp;lt;calculateStrLength&amp;gt;
  4000cd:   48 31 c0                xor    %rax,%rax
  4000d0:   48 31 ff                xor    %rdi,%rdi
  4000d3:   eb 0e                   jmp    4000e3 &amp;lt;reverseStr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see here that line 12 (our mov rdi, $ + 15) takes 10 bytes and function call at line 16 - 5 bytes, so it takes 15 bytes. That's why our return address will be mov rdi, $ + 15. Now we can push return address from rdi to stack and return from function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exitFromRoutine:
        ;; push return addres to stack again
        push rdi
        ;; return to _start
        ret
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we return to start. After call of the &lt;code&gt;calculateStrLength&lt;/code&gt; we write zeros to rax and rdi and jump to reverseStr label. It's implementation is following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;reverseStr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="n"&gt;rcx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;je&lt;/span&gt; &lt;span class="n"&gt;printResult&lt;/span&gt;
        &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;
        &lt;span class="n"&gt;dec&lt;/span&gt; &lt;span class="n"&gt;rcx&lt;/span&gt;
        &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;
        &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="n"&gt;reverseStr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we check our counter which is length of string and if it is zero we wrote all symbols to buffer and can print it. After checking counter we pop from stack to rax register first symbol and write it to OUTPUT buffer. We add rdi because in other way we'll write symbol to first byte of buffer. After this we increase rdi for moving next by OUTPUT buffer, decrease length counter and jump to the start of label.&lt;/p&gt;
&lt;p&gt;After execution of reverseStr we have reversed string in OUTPUT buffer and can write result to stdout with new line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;printResult&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt;
                &lt;span class="n"&gt;syscall&lt;/span&gt;
        &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="n"&gt;printNewLine&lt;/span&gt;

&lt;span class="n"&gt;printNewLine&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SYS_WRITE&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;STD_OUT&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NEW_LINE&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;
        &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and exit from the our program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SYS_EXIT&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EXIT_CODE&lt;/span&gt;
        &lt;span class="n"&gt;syscall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all, now we can compile our program with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;nasm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="n"&gt;elf64&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asm&lt;/span&gt;
    &lt;span class="n"&gt;ld&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;

&lt;span class="n"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and run it:&lt;/p&gt;
&lt;p&gt;&lt;img alt="result" src="http://1.bp.blogspot.com/-PoIXmq_sbmU/VG3x4VvtFiI/AAAAAAAAAH4/z2DiEHcrBxs/s1600/Screenshot%2Bfrom%2B2014-11-20%2B19%3A51%3A15.png" /&gt;&lt;/p&gt;
&lt;h2&gt;String operations&lt;/h2&gt;
&lt;p&gt;Of course there are many other instructions for string/bytes manipulations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;REP&lt;/code&gt; - repeat while rcx is not zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOVSB&lt;/code&gt; - copy a string of bytes (MOVSW, MOVSD and etc..)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMPSB&lt;/code&gt; - byte string comparison&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SCASB&lt;/code&gt; - byte string scanning&lt;/li&gt;
&lt;li&gt;&lt;code&gt;STOSB&lt;/code&gt; - write byte to string&lt;/li&gt;
&lt;/ul&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Say hello to x86_64 Assembly [part 3]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-3.html" rel="alternate"></link><published>2014-08-15T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-08-15:0xax.github.com/say-hello-to-x86_64-assembly-part-3.html</id><summary type="html">&lt;p&gt;The stack is special region in memory, which operates on the principle lifo (Last Input, First Output).&lt;/p&gt;
&lt;p&gt;We have 16 general-purpose registers for temporary data storage. They are RAX, RBX, RCX, RDX, RDI, RSI, RBP, RSP and R8-R15. It's too few for serious applications. So we can store data in the stack. Yet another usage of stack is following: When we call a function, return address copied in stack. After end of function execution, address copied in commands counter (RIP) and application continue to executes from next place after function.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;global _start

section .text

_start:
        mov rax, 1
        call incRax
        cmp rax, 2
        jne exit
        ;;
        ;; Do something
        ;;

incRax:
        inc rax
        ret
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we can see that after application runnning, rax is equal to 1. Then we call a function incRax, which increases rax value to 1, and now rax value must be 2. After this execution continues from 8 line, where we compare rax value with 2. Also as we can read in &lt;a href="www.x86-64.org/documentation/abi.pdf"&gt;System V AMD64 ABI&lt;/a&gt;, the first six function arguments passed in registers. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rdi&lt;/code&gt; - first argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsi&lt;/code&gt; - second argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdx&lt;/code&gt; - third argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rcx&lt;/code&gt; - fourth argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r8&lt;/code&gt; - fifth argument&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r9&lt;/code&gt; - sixth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next arguments will be passed in stack. So if we have function like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then first six arguments will be passed in registers, but 7 argument will be passed in stack.&lt;/p&gt;
&lt;h2&gt;Stack pointer&lt;/h2&gt;
&lt;p&gt;As i wroute about we have 16 general-purpose registers, and there are two interesting registers - RSP and RBP. RBP is the base pointer register. It points to the base of the current stack frame. RSP is the stack pointer, which points to the top of current stack frame.&lt;/p&gt;
&lt;p&gt;Commands&lt;/p&gt;
&lt;p&gt;We have two commands for work with stack:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;push argument&lt;/code&gt; - increments stack pointer (RSP) and stores argument in location pointed by stack pointer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pop argument&lt;/code&gt; - copied data to argument from location pointed by stack pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's look on one simple example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;global _start

section .text

_start:
        mov rax, 1
        mov rdx, 2
        push rax
        push rdx

        mov rax, [rsp + 8]

        ;;
        ;; Do something
        ;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we can see that we put 1 to rax register and 2 to rdx register. After it we push to stack values of these registers. Stack works as LIFO (Last In First Out). So after this stack or our application will have following structure:&lt;/p&gt;
&lt;p&gt;&lt;img alt="stack diagram" src="http://3.bp.blogspot.com/-4H9FAAD2duo/VB0VWfdWJrI/AAAAAAAAAHU/E6BAh0LkDV4/s1600/Untitled%2BDiagram.png" /&gt;&lt;/p&gt;
&lt;p&gt;Then we copy value from stack which has address rsp + 8. It means we get address of top of stack, add 8 to it and copy data by this address to rax. After it rax value will be 1.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Let's see one example. We will write simple program, which will get two command line arguments. Will get sum of this arguments and print result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .data
        SYS_WRITE equ 1
        STD_IN    equ 1
        SYS_EXIT  equ 60
        EXIT_CODE equ 0

        NEW_LINE   db 0xa
        WRONG_ARGC db &amp;quot;Must be two command line argument&amp;quot;, 0xa
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First of all we define &lt;code&gt;.data&lt;/code&gt; section with some values. Here we have four constants for linux syscalls, for sys_write, sys_exit and etc... And also we have two strings: First is just new line symbol and second is error message.&lt;/p&gt;
&lt;p&gt;Let's look on the &lt;code&gt;.text&lt;/code&gt; section, which consists from code of program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .text
        global _start

_start:
        pop rcx
        cmp rcx, 3
        jne argcError

        add rsp, 8
        pop rsi
        call str_to_int

        mov r10, rax
        pop rsi
        call str_to_int
        mov r11, rax

        add r10, r11
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's try to understand, what is happening here: After _start label first instruction get first value from stack and puts it to rcx register. If we run application with command line arguments, all of their will be in stack after running in following order:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    [rsp] - top of stack will contain arguments count.
    [rsp + 8] - will contain argv[0]
    [rsp + 16] - will contain argv[1]
    and so on...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So we get command line arguments count and put it to rcx. After it we compare rcx with 3. And if they are not equal we jump to argcError label which just prints error message:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;argcError:
    ;; sys_write syscall
    mov     rax, 1
    ;; file descritor, standard output
    mov     rdi, 1
    ;; message address
    mov     rsi, WRONG_ARGC
    ;; length of message
    mov     rdx, 34
    ;; call write syscall
    syscall
    ;; exit from program
    jmp exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Why we compare with 3 when we have two arguments. It's simple. First argument is a program name, and all after it are command line arguments which we passed to program. Ok, if we passed two command line arguments we go next to 10 line. Here we shift rsp to 8 and thereby missing the first argument - the name of the program. Now rsp points to first command line argument which we passed. We get it with pop command and put it to rsi register and call function for converting it to integer. Next we read about &lt;code&gt;str_to_int&lt;/code&gt; implementation. After our function ends to work we have integer value in rax register and we save it in r10 register. After this we do the same operation but with r11. In the end we have two integer values in r10 and r11 registers, now we can get sum of it with add command. Now we must convert result to string and print it. Let's see how to do it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mov rax, r10
;; number counter
xor r12, r12
;; convert to string
jmp int_to_str
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we put sum of command line arguments to rax register, set r12 to zero and jump to int_to_str. Ok now we have base of our program. We already know how to print string and we have what to print. Let's see at str_to_int and int_to_str implementation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;str_to_int&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;xor&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;
            &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rcx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;je&lt;/span&gt; &lt;span class="n"&gt;return_str&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;bl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rsi&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;sub&lt;/span&gt; &lt;span class="n"&gt;bl&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;
        &lt;span class="n"&gt;mul&lt;/span&gt; &lt;span class="n"&gt;rcx&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rbx&lt;/span&gt;
        &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="n"&gt;rsi&lt;/span&gt;
        &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;

&lt;span class="n"&gt;return_str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the start of str_to_int, we set up rax to 0 and rcx to 10. Then we go to next label. As you can see in above example (first line before first call of str_to_int) we put argv[1] in rsi from stack. Now we compare first byte of rsi with 0, because every string ends with NULL symbol and if it is we return. If it is not 0 we copy it's value to one byte bl register and substract 48 from it. Why 48? All numbers from 0 to 9 have 48 to 57 codes in asci table. So if we substract from number symbol 48 (for example from 57) we get number. Then we multiply rax on rcx (which has value - 10). After this we increment rsi for getting next byte and loop again. Algorthm is simple. For example if rsi points to '5' '7' '6' '\000' sequence, then will be following steps:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    rax = 0
    get first byte - 5 and put it to rbx
    rax * 10 --&amp;gt; rax = 0 * 10
    rax = rax + rbx = 0 + 5
    Get second byte - 7 and put it to rbx
    rax * 10 --&amp;gt; rax = 5 * 10 = 50
    rax = rax + rbx = 50 + 7 = 57
    and loop it while rsi is not \000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After str_to_int we will have number in rax. Now let's look at int_to_str:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;int_to_str&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rbx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
        &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="n"&gt;rbx&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt;
        &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;
        &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;rdx&lt;/span&gt;
        &lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="n"&gt;r12&lt;/span&gt;
        &lt;span class="n"&gt;cmp&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x0&lt;/span&gt;
        &lt;span class="n"&gt;jne&lt;/span&gt; &lt;span class="n"&gt;int_to_str&lt;/span&gt;
        &lt;span class="n"&gt;jmp&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we put 0 to rdx and 10 to rbx. Than we exeute div rbx. If we look above at code before str_to_int call. We will see that rax contains integer number - sum of two command line arguments. With this instruction we devide rax value on rbx value and get reminder in rdx and whole part in rax. Next we add to rdx 48 and 0x0. After adding 48 we'll get asci symbol of this number and all strings much be ended with 0x0. After this we save symbol to stack, increment r12 (it's 0 at first iteration, we set it to 0 at the _start) and compare rax with 0, if it is 0 it means that we ended to convert integer to string. Algorithm step by step is following: For example we have number 23&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;rdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="nx"&gt;rdx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;
    &lt;span class="nx"&gt;compare&lt;/span&gt; &lt;span class="nx"&gt;rax&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;no&lt;/span&gt; &lt;span class="nx"&gt;go&lt;/span&gt; &lt;span class="nx"&gt;again&lt;/span&gt;
    &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;rdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="nx"&gt;rdx&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;48&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;
    &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;
    &lt;span class="nx"&gt;compare&lt;/span&gt; &lt;span class="nx"&gt;rax&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;yes&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;can&lt;/span&gt; &lt;span class="nx"&gt;finish&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;execution&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;we&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;have&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;stack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We implemented two useful function &lt;code&gt;int_to_str&lt;/code&gt; and &lt;code&gt;str_to_int&lt;/code&gt; for converting integer number to string and vice versa. Now we have sum of two integers which was converted into string and saved in the stack. We can print result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;print:
    ;;;; calculate number length
    mov rax, 1
    mul r12
    mov r12, 8
    mul r12
    mov rdx, rax

    ;;;; print sum
    mov rax, SYS_WRITE
    mov rdi, STD_IN
    mov rsi, rsp
    ;; call sys_write
    syscall

    jmp exit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We already know how to print string with &lt;code&gt;sys_write&lt;/code&gt; syscall, but here is one interesting part. We must to calculate length of string. If you will look on the &lt;code&gt;int_to_str&lt;/code&gt;, you will see that we increment r12 register every iteration, so it contains amount of digits in our number. We must multiple it to 8 (because we pushed every symbol to stack) and it will be length of our string which need to print. After this we as everytime put 1 to rax (sys_write number), 1 to rdi (stdin), string length to rdx and pointer to the top of stack to rsi (start of string). And finish our program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SYS_EXIT&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;
    &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;rdi&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EXIT_CODE&lt;/span&gt;
    &lt;span class="n"&gt;syscall&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's All.&lt;/p&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Say hello to x86_64 Assembly [part 2]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-2.html" rel="alternate"></link><published>2014-08-10T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-08-10:0xax.github.com/say-hello-to-x86_64-assembly-part-2.html</id><summary type="html">&lt;p&gt;Some days ago I wrote the first blog post - introduction to x64 assembly - Say hello to x64 Assembly [part 1] which to my surprise caused great interest:&lt;/p&gt;
&lt;p&gt;&lt;img alt="newscombinator" src="http://2.bp.blogspot.com/-wtVOF9PoT3U/VAXLYjlkbbI/AAAAAAAAAGs/Wo-53TGH0Do/s1600/Screenshot%2Bfrom%2B2014-08-31%2B23%3A58%3A26.png" /&gt;
&lt;img alt="reddit" src="http://4.bp.blogspot.com/-__MfY5bYax4/VAXLf8lQmGI/AAAAAAAAAG0/MBdT2vjhcts/s1600/Screenshot%2Bfrom%2B2014-09-01%2B00%3A30%3A32.png" /&gt;&lt;/p&gt;
&lt;p&gt;It motivates me even more to describe my way of learning. During this days I got many feedback from different people. There were many grateful words, but what is more important for me, there were many advices and adequate critics. Especially I want to say thank you words for great feedback to:&lt;/p&gt;
&lt;p&gt;It motivates me even more to describe my way of learning. During this days I got many feedback from different people. There were many grateful words, but what is more important for me, there were many advices and adequate critics. Especially I want to say thank you words for great feedback to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.reddit.com/user/Fiennes"&gt;Fiennes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://disqus.com/by/Universal178/"&gt;Grienders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/user?id=nkurz"&gt;nkurz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And all who took a part in discussion at Reddit and Hacker News. There were many opinions, that first part was a not very clear for absolute beginner, that's why i decided to write more informative posts. So, let's start with second part of Say hello to x86_64 assembly.&lt;/p&gt;
&lt;h2&gt;Terminology and Concepts&lt;/h2&gt;
&lt;p&gt;As i wrote above, I got many feedback from different people that some parts of first post are not clear, that's why let's start from description of some terminology that we will see in this and next parts.&lt;/p&gt;
&lt;p&gt;Register - register is a small amount of storage inside processor. Main point of processor is data processing. Processor can get data from memory, but it is slow operation. That's why processor has own internal restricted set of data storage which name is - register.&lt;/p&gt;
&lt;p&gt;Little-endian - we can imagine memory as one large array. It contains bytes. Each address stores one element of the memory "array". Each element is one byte. For example we have 4 bytes: AA 56 AB FF. In little-endian the least significant byte has the smallest address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    0 FF
    1 AB
    2 56
    3 AA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where 0,1,2 and 3 are memory addresses.&lt;/p&gt;
&lt;p&gt;Big-endian - big-endian stores bytes in opposite order than little-endian. So if we have AA 56 AB FF bytes sequence it will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    0 AA
    1 56
    2 AB
    3 FF
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Syscall - is the way a user level program asks the operating system to do something for it. You can find syscall table - here. Stack - processor has a very restricted count of registers. So stack is a continuous area of ​​memory addressable special registers RSP,SS,RIP and etc... We will take a closer look on stack in next parts.&lt;/p&gt;
&lt;p&gt;Section - every assembly program consists from sections. There are following sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; - section is used for declaring initialized data or constants&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bss&lt;/code&gt; - section is used for declaring non initialized variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; - section is used for code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;General-purpose registers - there are 16 general-purpose registers - rax, rbx, rcx, rdx, rbp, rsp, rsi, rdi, r8, r9, r10, r11, r12, r13, r14, r15. Of course, it is not a full list of terms and concepts which related with assembly programming. If we will meet another strange and unfamiliar words in next blog posts, there will be explanation of this words.&lt;/p&gt;
&lt;h2&gt;Data Types&lt;/h2&gt;
&lt;p&gt;The fundamental data types are bytes, words, doublewords, quadwords, and double quadwords. A byte is eight bits, a word is 2 bytes, a doubleword is 4 bytes, a quadword is 8 bytes and a double quadword is 16 bytes (128 bits).&lt;/p&gt;
&lt;p&gt;Now we will work only with integer numbers, so let's see to it. There two types of integer: unsigned and signed. Unsigned integers are unsigned binary numbers contained in a byte, word, doubleword, and quadword. Their values range from 0 to 255 for an unsigned byte integer, from 0 to 65,535 for an unsigned word integer, from 0 to 2^32 – 1 for an unsigned doubleword integer, and from 0 to 2^64 – 1 for an unsigned quadword integer. Signed integers are signed binary numbers held as unsigned in a byte, word and etc... The sign bit is set for negative integers and cleared for positive integers and zero. Integer values range from –128 to +127 for a byte integer, from –32,768 to +32,767 for a word integer,from –2^31 to +2^31 – 1 for a doubleword integer, and from –2^63 to +2^63 – 1 for a quadword integer.&lt;/p&gt;
&lt;h2&gt;Sections&lt;/h2&gt;
&lt;p&gt;As i wrote above, every assembly program consists from sections, it can be data section, text section and bss section. Let's look on data section.It's main point - to declare initialized constants. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .data
    num1:   equ 100
    num2:   equ 50
    msg:    db &amp;quot;Sum is correct&amp;quot;, 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, it is almost all clear here. 3 constants with name num1, num2, msg and with values 100, 50 and "Sum is correct", 10. But what is it db, equ? Actual NASM supports a number of pseudo-instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DB, DW, DD, DQ, DT, DO, DY and DZ - are used for declaring initialized data. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;; Initialize 4 bytes 1h, 2h, 3h, 4h
db 0x01,0x02,0x03,0x04

;; Initialize word to 0x12 0x34
dw    0x1234
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;RESB, RESW, RESD, RESQ, REST, RESO, RESY and RESZ - are used for declaring non initialized variables&lt;/li&gt;
&lt;li&gt;INCBIN - includes External Binary Files&lt;/li&gt;
&lt;li&gt;EQU - defines constant. For example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;; now one is 1
one equ 1
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;TIMES - Repeating Instructions or Data. (description will be in next posts)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Arithmetic operations&lt;/h2&gt;
&lt;p&gt;There is short list of arithmetic instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADD&lt;/code&gt; - integer add&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SUB&lt;/code&gt; - substract&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MUL&lt;/code&gt; - unsigned multiply&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IMUL&lt;/code&gt; - signed multiply&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DIV&lt;/code&gt; - unsigned divide&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IDIV&lt;/code&gt; - signed divide&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INC&lt;/code&gt; - increment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DEC&lt;/code&gt; - decrement&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NEG&lt;/code&gt; - negate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of it we will see at practice in this post. Other will be covered in next posts.&lt;/p&gt;
&lt;h2&gt;Control flow&lt;/h2&gt;
&lt;p&gt;Usually programming languages have ability to change order of evaluation (with if statement, case statement, goto and etc...) and assembly has it too. Here we will see some of it. There is cmp instruction for performing comparison between two values. It is used along with the conditional jump instruction for decision making. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;; compare rax with 50
cmp rax, 50
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;cmp&lt;/code&gt; instruction just compares 2 values, but doesn't affect them and doesn't execute anything depend on result of comparison. For performing any actions after comparison there is conditional jump instructions. It can be one of it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JE&lt;/code&gt; - if equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JZ&lt;/code&gt; - if zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JNE&lt;/code&gt; - if not equal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JNZ&lt;/code&gt; - if not zero&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JG&lt;/code&gt; - if first operand is greater than second&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JGE&lt;/code&gt; - if first operand is greater or equal to second&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JA&lt;/code&gt; - the same that JG, but performs unsigned comparison&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JAE&lt;/code&gt; - the same that JGE, but performs unsigned comparison&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example if we want to make something like if/else statement in C:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rax&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will be in assembly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;;; compare rax with 50
cmp rax, 50
;; perform .exit if rax is not equal 50
jne .exit
jmp .right
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is also unconditional jump with syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;JMP label
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;_start:
    ;; ....
    ;; do something and jump to .exit label
    ;; ....
    jmp .exit

.exit:
    mov    rax, 60
    mov    rdi, 0
    syscall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we have can have some code which will be after _start label, and all of this code will be executed, assembly transfer control to .exit label, and code after .exit: will start to execute.&lt;/p&gt;
&lt;p&gt;Often unconditional jump uses in loops. For example we have label and some code after it. This code executes anything, than we have condition and jump to the start of this code if condition is not successfully. Loops will be covered in next parts.&lt;/p&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;p&gt;Let's see simple example. It will take two integer numbers, get sum of these numbers and compare it with predefined number. If predefined number is equal to sum, it will print something on the screen, if not - just exit. Here is the source code of our example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .data
    ; Define constants
    num1:   equ 100
    num2:   equ 50
    ; initialize message
    msg:    db &amp;quot;Sum is correct\n&amp;quot;

section .text

    global _start

;; entry point
_start:
    ; set num1&amp;#39;s value to rax
    mov rax, num1
    ; set num2&amp;#39;s value to rbx
    mov rbx, num2
    ; get sum of rax and rbx, and store it&amp;#39;s value in rax
    add rax, rbx
    ; compare rax and 150
    cmp rax, 150
    ; go to .exit label if rax and 150 are not equal
    jne .exit
    ; go to .rightSum label if rax and 150 are equal
    jmp .rightSum

; Print message that sum is correct
.rightSum:
    ;; write syscall
    mov     rax, 1
    ;; file descritor, standard output
    mov     rdi, 1
    ;; message address
    mov     rsi, msg
    ;; length of message
    mov     rdx, 15
    ;; call write syscall
    syscall
    ; exit from program
    jmp .exit

; exit procedure
.exit:
    ; exit syscall
    mov    rax, 60
    ; exit code
    mov    rdi, 0
    ; call exit syscall
    syscall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's go through the source code. First of all there is data section with two constants num1, num2 and variable msg with "Sum is correct\n" value. Now look at 14 line. There is begin of program's entry point. We transfer num1 and num2 values to general purpose registers rax and rbx. Sum it with add instruction. After execution of add instruction, it calculates sum of values from rax and rbx and store it's value to rax. Now we have sum of num1 and num2 in the rax register.&lt;/p&gt;
&lt;p&gt;Ok we have num1 which is 100 and num2 which is 50. Our sum must be 150. Let's check it with cmp instruction. After comparison rax and 150 we check result of comparison, if rax and 150 are not equal (checking it with jne) we go to .exit label, if they are equal we go to .rightSum label.&lt;/p&gt;
&lt;p&gt;Now we have two labels: .exit and .rightSum. First is just sets 60 to rax, it is exit system call number, and 0 to rdi, it is a exit code. Second is .rightSum is pretty easy, it just prints Sum is correct.&lt;/p&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Say hello to x86_64 Assembly [part 1]</title><link href="0xax.github.com/say-hello-to-x86_64-assembly-part-1.html" rel="alternate"></link><published>2014-08-01T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-08-01:0xax.github.com/say-hello-to-x86_64-assembly-part-1.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are many developers between us. We write a tons of code every day. Sometime, it is even not a bad code :) Every of us can easily write the simplest code like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x + y = %d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Every of us can understand what's this C code does. But... How this code works at low level? I think that not all of us can answer on this question, and me too. I thought that i can write code on high level programming languages like Haskell, Erlang, Go and etc..., but i absolutely don't know how it works at low level, after compilation. So I decided to take a few deep steps down, to assembly, and to describe my learning way about this. Hope it will be interesting, not only for me. Something about 5 - 6 years ago I already used assembly for writing simple programs, it was in university and i used Turbo assembly and DOS operating system. Now I use Linux-x86-64 operating system. Yes, must be big difference between Linux 64 bit and DOS 16 bit. So let's start.&lt;/p&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;Before we started, we must to prepare some things like As I wrote about, I use Ubuntu (Ubuntu 14.04.1 LTS 64 bit), thus my posts will be for this operating system and architecture. Different CPU supports different set of instructions. I use Intel Core i7 870 processor, and all code will be written processor. Also i will use nasm assembly. You can install it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install nasm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's version must be 2.0.0 or greater. I use NASM version 2.10.09 compiled on Dec 29 2013 version. And the last part, you will need in text editor where you will write you assembly code. I use Emacs with nasm-mode.el for this. It is not mandatory, of course you can use your favourite text editor. If you use Emacs as me you can download nasm-mode.el and configure your Emacs like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;load&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;~/.emacs.d/lisp/nasm.el&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;nasm-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\\.\\(asm\\|s\\)$&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;nasm-mode&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all we need for this moment. Other tools will be describe in next posts.&lt;/p&gt;
&lt;h2&gt;Syntax of nasm assembly&lt;/h2&gt;
&lt;p&gt;Here I will not describe full assembly syntax, we'll mention only those parts of the syntax, which we will use in this post. Usually NASM program divided into sections. In this post we'll meet 2 following sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data section&lt;/li&gt;
&lt;li&gt;text section&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data section is used for declaring constants. This data does not change at runtime. You can declare various math or other constants and etc... The syntax for declaring data section is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    section .data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The text section is for code. This section must begin with the declaration global _start, which tells the kernel where the program execution begins.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    section .text
    global _start
    _start:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Comments starts with the &lt;code&gt;;&lt;/code&gt; symbol. Every NASM source code line contains some combination of the following four fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;instruction&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;operands&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;comment&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fields which are in square brackets are optional. A basic NASM instruction consists from two parts. The first one is the name of the instruction which is to be executed, and the second are the operands of this command. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    MOV COUNT, 48 ; Put value 48 in the COUNT variable
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Hello world&lt;/h2&gt;
&lt;p&gt;Let's write first program with NASM assembly. And of course it will be traditional Hello world program. Here is the code of it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;section .data
    msg db      &amp;quot;hello, world!&amp;quot;

section .text
    global _start
_start:
    mov     rax, 1
    mov     rdi, 1
    mov     rsi, msg
    mov     rdx, 13
    syscall
    mov    rax, 60
    mov    rdi, 0
    syscall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, it doesn't look like printf("Hello world"). Let's try to understand what is it and how it works. Take a look 1-2 lines. We defined data section and put there msg constant with Hello world value. Now we can use this constant in our code. Next is declaration text section and entry point of program. Program will start to execute from 7 line. Now starts the most interesting part. We already know what is it mov instruction, it gets 2 operands and put value of second to first. But what is it these rax, rdi and etc... As we can read in the wikipedia:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;A central processing unit (CPU) is the hardware within a computer that carries out the instructions of a computer program by performing the basic arithmetical, logical, and input/output operations of the system.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, CPU performs some operations, arithmetical and etc... But where can it get data for this operations? The first answer in memory. However, reading data from and storing data into memory slows down the processor, as it involves complicated processes of sending the data request across the control bus. Thus CPU has own internal memory storage locations called registers:&lt;/p&gt;
&lt;p&gt;&lt;img alt="registers" src="http://i45.tinypic.com/10wtooh.png" /&gt;&lt;/p&gt;
&lt;p&gt;So when we write mov rax, 1, it means to put 1 to the rax register. Now we know what is it rax, rdi, rbx and etc... But need to know when to use rax but when rsi and etc...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rax&lt;/code&gt; - temporary register; when we call a syscal, rax must contain syscall number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdx&lt;/code&gt; - used to pass 3rd argument to functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdi&lt;/code&gt; - used to pass 1st argument to functions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsi&lt;/code&gt; - pointer used to pass 2nd argument to functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In another words we just make a call of &lt;code&gt;sys_write&lt;/code&gt; syscall. Take a look on &lt;code&gt;sys_write&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="nf"&gt;sys_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It has 3 arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fd&lt;/code&gt; - file descriptor. Can be 0, 1 and 2 for standard input, standard output and standard error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buf&lt;/code&gt; - points to a character array, which can be used to store content obtained from the file pointed to by fd.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count&lt;/code&gt; - specifies the number of bytes to be written from the file into the character array&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we know that &lt;code&gt;sys_write&lt;/code&gt; syscall takes three arguments and has number one in syscall table. Let's look again to our hello world implementation. We put 1 to rax register, it means that we will use sys_write system call. In next line we put 1 to rdi register, it will be first argument of &lt;code&gt;sys_write&lt;/code&gt;, 1 - standard output. Then we store pointer to msg at rsi register, it will be second buf argument for sys_write. And then we pass the last (third) parameter (length of string) to rdx, it will be third argument of sys_write. Now we have all arguments of the &lt;code&gt;sys_write&lt;/code&gt; and we can call it with syscall function at 11 line. Ok, we printed "Hello world" string, now need to do correctly exit from program. We pass 60 to rax register, 60 is a number of exit syscall. And pass also 0 to rdi register, it will be error code, so with 0 our program must exit successfully. That's all for "Hello world". Quite simple :) Now let's build our program. For example we have this code in hello.asm file. Then we need to execute following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;nasm -f elf64 -o hello.o hello.asm
&lt;span class="nv"&gt;$ &lt;/span&gt;ld -o hello hello.o
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After it we will have executable hello file which we can run with ./hello and will see Hello world string in the terminal.&lt;/p&gt;</summary><category term="linux"></category><category term="x86_64"></category><category term="assembler"></category></entry><entry><title>Using Elixir to write Ybot plugins</title><link href="0xax.github.com/using-elixir-to-write-ybot-plugins.html" rel="alternate"></link><published>2014-06-01T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-06-01:0xax.github.com/using-elixir-to-write-ybot-plugins.html</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/OtpChatBot/Ybot"&gt;Ybot&lt;/a&gt; - is a customizable bot which was inspired by GitHub's Hubot and written with Erlang programming language. You can create pligin for Ybot in one of following languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;Erlang/OTP&lt;/li&gt;
&lt;li&gt;Elixir&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post i will tell you to create Ybot plugin with Elixir. For example we need to create Ybot's plugin which will get information about commits from the Github's repository and will send it to chat if somebody updated your repository. We will use Github API v3. For getting info about Github repository commits we must send request:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;GET /repos/:owner/:repo/commits&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's create Elixir module and send request to the Github API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;GithubCommitsNotification&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="na"&gt;@moduledoc&lt;/span&gt; &lt;span class="sh"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sh"&gt;        Github commits notification Ybot plugin.&lt;/span&gt;
&lt;span class="sh"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="na"&gt;@repo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;YBOT&amp;#39;&lt;/span&gt;
    &lt;span class="na"&gt;@author&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0xAX&amp;#39;&lt;/span&gt;
    &lt;span class="na"&gt;@github_api_url&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;https://api.github.com/repos/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="na"&gt;@author&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="na"&gt;@repo&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/commits&amp;#39;&lt;/span&gt;

    &lt;span class="na"&gt;@ybot_api_url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8090/memories/&amp;#39;&lt;/span&gt;
    &lt;span class="na"&gt;@ybot_plugin_api_url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8090/memories/?plugin=elixir_github_commits_notification&amp;#39;&lt;/span&gt;

    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:inets&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:asn1&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:crypto&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:public_key&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:ssl&lt;/span&gt;

    &lt;span class="c1"&gt;# Send request to the Github API&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:httpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;@github_api_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]},&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:ssl&lt;/span&gt;&lt;span class="p"&gt;,[{&lt;/span&gt;&lt;span class="ss"&gt;:verify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}]}],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="c1"&gt;# parse response&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here you can see simple Elixir module with some attributes (@repo, @author and etc...), and sending http 'GET' request to the Github commits API. We must get response like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6dcb09b5b57875f334f61aebed695e2e4193db5e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Monalisa Octocat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;support@github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2011-04-14T16:00:49Z&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;committer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Monalisa Octocat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;support@github.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2011-04-14T16:00:49Z&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Fix all the bugs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;tree&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6dcb09b5b57875f334f61aebed695e2e4193db5e&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;octocat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;avatar_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/images/error/octocat_happy.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;gravatar_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;somehexcode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.github.com/users/octocat&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;committer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;octocat&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;avatar_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://github.com/images/error/octocat_happy.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;gravatar_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;somehexcode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.github.com/users/octocat&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;parents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;6dcb09b5b57875f334f61aebed695e2e4193db5e&amp;quot;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we must get some fields from this response, like a commit's author, commit message and etc...:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# get sha&lt;/span&gt;
&lt;span class="p"&gt;{&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get author&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# get commit message&lt;/span&gt;
&lt;span class="p"&gt;{&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ybot has an own storage with REST API, thank you to &lt;a href="https://twitter.com/tajgur"&gt;@tajgur&lt;/a&gt;. You can find documentation for it - here. And also Ybot has notifications support, in other words you can set up Ybot that it will execute your plugin by timeout and send result to you. For example you can configure Ybot that it will send to you status of your system every hour and etc... We have memory API in Ybot and we can get last information about repository commits, check it, save last commit if it changed and will send update to the chat. Remeber that Ybot's plugin must write it's result to the &lt;code&gt;STDOUT&lt;/code&gt; in the end of execution. Here is the full source code of this plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;GithubCommitsNotification&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="na"&gt;@moduledoc&lt;/span&gt; &lt;span class="sh"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sh"&gt;        Github commits notification Ybot plugin.&lt;/span&gt;
&lt;span class="sh"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="na"&gt;@repo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;YBOT&amp;#39;&lt;/span&gt;
    &lt;span class="na"&gt;@author&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0xAX&amp;#39;&lt;/span&gt;
    &lt;span class="na"&gt;@github_api_url&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;https://api.github.com/repos/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="na"&gt;@author&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="na"&gt;@repo&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/commits&amp;#39;&lt;/span&gt;

    &lt;span class="na"&gt;@ybot_api_url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8090/memories/&amp;#39;&lt;/span&gt;
    &lt;span class="na"&gt;@ybot_plugin_api_url&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://localhost:8090/memories/?plugin=elixir_github_commits_notification&amp;#39;&lt;/span&gt;

    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:inets&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:asn1&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:crypto&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:public_key&lt;/span&gt;
    &lt;span class="ss"&gt;:ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="ss"&gt;:ssl&lt;/span&gt;

    &lt;span class="c1"&gt;# Send request to the Github API&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:httpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;@github_api_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]},&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="ss"&gt;:ssl&lt;/span&gt;&lt;span class="p"&gt;,[{&lt;/span&gt;&lt;span class="ss"&gt;:verify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}]}],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="c1"&gt;# parse response&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# get sha&lt;/span&gt;
    &lt;span class="p"&gt;{&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# get author&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;commit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# get commit message&lt;/span&gt;
    &lt;span class="p"&gt;{&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;New commit to the repo - &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="na"&gt;@repo&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39; sha: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="ss"&gt;:erlang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; author: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="ss"&gt;:erlang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
             &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; message: &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="ss"&gt;:erlang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:httpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;@ybot_plugin_api_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;[]&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;elixir_github_commits_notification&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="ss"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="ss"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

            &lt;span class="c1"&gt;# save new record to Ybot storage&lt;/span&gt;
            &lt;span class="ss"&gt;:httpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;@ybot_api_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
            &lt;span class="c1"&gt;# write result to stdout&lt;/span&gt;
            &lt;span class="ss"&gt;:io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~p~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="bp"&gt;_&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyfind&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

            &lt;span class="k"&gt;cond&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
                &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="ss"&gt;:io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                &lt;span class="no"&gt;true&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="c1"&gt;# delete old commit&lt;/span&gt;
                    &lt;span class="ss"&gt;:httpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:delete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;@ybot_api_url&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;binary_to_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;[]},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

                    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;JSON&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;elixir_github_commits_notification&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="ss"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sha&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="ss"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sha&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

                    &lt;span class="c1"&gt;# save new record to Ybot storage&lt;/span&gt;
                    &lt;span class="ss"&gt;:httpc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;@ybot_api_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
                    &lt;span class="c1"&gt;# write result to stdout&lt;/span&gt;
                    &lt;span class="ss"&gt;:io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~p~n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put this plugin to Ybot's &lt;code&gt;notifications&lt;/code&gt; directory and set up it in configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;notification&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;github_commits_notification&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;irc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]},&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github_commits_notifications - plugin name&lt;/li&gt;
&lt;li&gt;[irc, twitter] - list of transports in which Ybot will send report&lt;/li&gt;
&lt;li&gt;600 - timeout in seconds&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can set up any transport which Ybot supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IRC&lt;/li&gt;
&lt;li&gt;XMPP&lt;/li&gt;
&lt;li&gt;Campfire&lt;/li&gt;
&lt;li&gt;HipChat&lt;/li&gt;
&lt;li&gt;Skype&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;FlowDock&lt;/li&gt;
&lt;li&gt;SMTP&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;/ul&gt;</summary><category term="elixir"></category></entry><entry><title>GHCi runtime linker found a duplicate definition error</title><link href="0xax.github.com/ghci-runtime-linker-found-a-duplicate-definition-error.html" rel="alternate"></link><published>2014-05-11T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-05-11:0xax.github.com/ghci-runtime-linker-found-a-duplicate-definition-error.html</id><summary type="html">&lt;p&gt;Despite Haskell programming language is not young language, it has a really great and helpful community, it has big amount of libraries, unfortunately Haskell is not popular programming language. I'm not against this programming language, opposite, haskell's unpopularity makes me sad. I will not write about haskell popularity in industry, I'll try to explain my thoughts about "Why Haskell is not popular" not as Haskell expert, not as professional Haskell developer (i don't get payment for Haskell programming), but from position of usual developer who started to learn/experiment with Haskell some months ago and already don't afraid monads :). I can't So I will try to explain my opinion about Why Haskell is not popular in this post.&lt;/p&gt;
&lt;h2&gt;Myths&lt;/h2&gt;
&lt;p&gt;I'm not long time with Haskell and I don't know all myths/stories/jokes and other funny things about Haskell, I know one popular myth (for my look it's a myth) that Haskell is a difficult. Difficult to learn, difficult to use, not important, it is difficult. I think it's old myth, I remember it before I started to learn Haskell. I think that it is really myth and Haskell can be not so hard as you can think about it. It is not difficult, it is different. If you're using python,ruby,C++,javascript,java,something else... Haskell will be really different. Why it is different? There are many reasons for this like: another programming paradigm, lazy evaluations, different concepts and etc... But of course it is not a big problem and relatively easy to solve. Developer just need to spend more time to learn it than with another programming languages like python,javascript and etc... (Except C++ of course :))&lt;/p&gt;
&lt;h2&gt;Lack of documentation&lt;/h2&gt;
&lt;p&gt;The Lack of documentation is a first problem in this list that related with practical side of Haskell usage. I don't mean that Haskell as language has bad documentation, it is not true. I'm speaking about Haskell libraries documentation. It's the one of big problem that stands on the road to Haskell popularity. Sooner or later after start of Haskell learning developer will want to use libraries written in Haskell. We can easily find library by name, or functions/data types name with Hoogle, it is good, but how to use this libraries if developer doesn't program in Haskell a couple years and library has no or has but bad documentation. For example some time ago I played with WAI and i was need in websockets. Fortunately WAI has &lt;a href="http://hackage.haskell.org/package/wai-websockets-3.0.0"&gt;wai-websockets&lt;/a&gt; package but let's look on it's &lt;a href="http://hackage.haskell.org/package/wai-websockets-3.0.0/docs/Network-Wai-Handler-WebSockets.html"&gt;documentation&lt;/a&gt;. How to use it? I don't know how about you, but I don't understand. I see only one way out of this: to read &lt;a href="https://github.com/yesodweb/wai/blob/master/wai-websockets/server.lhs"&gt;wai-websockets&lt;/a&gt; source code or examples. Is it good? I'm not sure.&lt;/p&gt;
&lt;h2&gt;Standard Library&lt;/h2&gt;
&lt;p&gt;Now let's talk about Haskell's standard library. On my look it has many really useful things for haskell and has really little amount things for Real World play. What it means when I am telling about Real World. It's simple, i mean that Haskell standard library has many things like Control.Category, Control.Arrow, Data.Typeable and etc... Again, I don't know how is it for you, but for me and I think other newbie Haskell developers: Category, Arrow and other magic words are just words without any meaning. Not, i know Arrows, Monads are very useful in Haskell, but where is the something like Network.TcpClient, Network.HttpServer and etc... I know that Haskell has separate libraries for TCP, HTTP and other network and not only network things. But imagine, for exmaple I just started with Haskell and I want to write simple example like sending HTTP request and getting response, i need to understand where to find library for this, how to install it and etc... I don't speak that Haskell standard library must have all things for all case, but things like http client in stdlib is a standard case. Or i'm wrong? Let's look on golang for example. I think that it has a perfect standard library. Look on it and haskell standard library, do you feel difference? Golang is only five years and Haskell is 24, so big difference. Of course I have no statistic, but I see that golang is much popular for this moment. I don't think that it is main reason but one of.&lt;/p&gt;
&lt;h2&gt;Why to learn&lt;/h2&gt;
&lt;p&gt;I think it's not only Haskell problem, but other languages too. I see only one answer for this question: To get/improve knowledges in functional programming and look on your working programming language with other eyes after it. Yes, getting new knowledges it is very good. But what about practical side? I know that somewhere developers who get money for Haskell programming, but I don't see tons of vacancies for Haskell developers like for javascript, ruby or other tools and it is problem. Let's look in another side. For example i want to start learn Haskell for my super-cool pet project. But why Haskell in this case? For web development I can take habitual ruby/python/php, for system programming I can take C/C++ or maybe Rust, for concurrent programming I will choose erlang. So why i need to learn new programming language and in addition so different from my standard tools?&lt;/p&gt;
&lt;h2&gt;Lazyness&lt;/h2&gt;
&lt;p&gt;When we start to learn Haskell we can read something like this: Haskell - general purpose programming language with non-strict evaluation. I think that many developers know about lazy evaluations, but I am really not sure that all of they knows how it works, how to correctly use it and etc... In this way, I as beginner in Haskell must learn not only another programming paradigm, but also another evaluation order. It is much harder, because it is much implicit. For example let's take a look at popular ByteString library. It provides two implementations lazy strings and strict. But I still don't know where to use first and where to use second.&lt;/p&gt;
&lt;h2&gt;Different abstractions&lt;/h2&gt;
&lt;p&gt;It is problem of Haskell learning. Haskell uses different abstractions than other programming languages. And if you know python for example it will be much easy to learn ruby than Haskell. Let's look on simple echo example. You need to read input from stdin and prtin this string again. How we do it with python language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All is transparent enough. We do this task with all imperative programming languages in this way. First we reading from stdin and put result to a variable and than pass this variable to the printing function. Let's look at the same Haskell example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;getLine&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok. Developer can guess about getLine and putStrLn, but what is it &amp;gt;&amp;gt;=. If we open documentation we will read something like this: &amp;gt;&amp;gt;= combine two monadic values... "combine two monadic values...". What is it Monad, How to use Monad and many many different questions with not easy answers sometimes. And it is only monads (concept which standard developer could not hear never), but there are many different concepts like Functors, Comonads and many many others which you can't meet in standard programming languages.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So it was a short list of my thoughts why Haskell is not popular. I am very interesting what do you think about Haskell popularity.
In the end I want to remind that all from this post only my opinion and if you're agree or disagree with me write me a comment.&lt;/p&gt;</summary><category term="haskell"></category></entry><entry><title>My thoughts about why Haskell is not popular</title><link href="0xax.github.com/my-thoughts-about-why-haskell-is-not-popular.html" rel="alternate"></link><published>2014-05-11T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-05-11:0xax.github.com/my-thoughts-about-why-haskell-is-not-popular.html</id><summary type="html">&lt;p&gt;Despite Haskell programming language is not young language, it has a really great and helpful community, it has big amount of libraries, unfortunately Haskell is not popular programming language. I'm not against this programming language, opposite, haskell's unpopularity makes me sad. I will not write about haskell popularity in industry, I'll try to explain my thoughts about "Why Haskell is not popular" not as Haskell expert, not as professional Haskell developer (i don't get payment for Haskell programming), but from position of usual developer who started to learn/experiment with Haskell some months ago and already don't afraid monads :). I can't So I will try to explain my opinion about Why Haskell is not popular in this post.&lt;/p&gt;
&lt;h2&gt;Myths&lt;/h2&gt;
&lt;p&gt;I'm not long time with Haskell and I don't know all myths/stories/jokes and other funny things about Haskell, I know one popular myth (for my look it's a myth) that Haskell is a difficult. Difficult to learn, difficult to use, not important, it is difficult. I think it's old myth, I remember it before I started to learn Haskell. I think that it is really myth and Haskell can be not so hard as you can think about it. It is not difficult, it is different. If you're using python,ruby,C++,javascript,java,something else... Haskell will be really different. Why it is different? There are many reasons for this like: another programming paradigm, lazy evaluations, different concepts and etc... But of course it is not a big problem and relatively easy to solve. Developer just need to spend more time to learn it than with another programming languages like python,javascript and etc... (Except C++ of course :))&lt;/p&gt;
&lt;h2&gt;Lack of documentation&lt;/h2&gt;
&lt;p&gt;The Lack of documentation is a first problem in this list that related with practical side of Haskell usage. I don't mean that Haskell as language has bad documentation, it is not true. I'm speaking about Haskell libraries documentation. It's the one of big problem that stands on the road to Haskell popularity. Sooner or later after start of Haskell learning developer will want to use libraries written in Haskell. We can easily find library by name, or functions/data types name with Hoogle, it is good, but how to use this libraries if developer doesn't program in Haskell a couple years and library has no or has but bad documentation. For example some time ago I played with WAI and i was need in websockets. Fortunately WAI has &lt;a href="http://hackage.haskell.org/package/wai-websockets-3.0.0"&gt;wai-websockets&lt;/a&gt; package but let's look on it's &lt;a href="http://hackage.haskell.org/package/wai-websockets-3.0.0/docs/Network-Wai-Handler-WebSockets.html"&gt;documentation&lt;/a&gt;. How to use it? I don't know how about you, but I don't understand. I see only one way out of this: to read &lt;a href="https://github.com/yesodweb/wai/blob/master/wai-websockets/server.lhs"&gt;wai-websockets&lt;/a&gt; source code or examples. Is it good? I'm not sure.&lt;/p&gt;
&lt;h2&gt;Standard Library&lt;/h2&gt;
&lt;p&gt;Now let's talk about Haskell's standard library. On my look it has many really useful things for haskell and has really little amount things for Real World play. What it means when I am telling about Real World. It's simple, i mean that Haskell standard library has many things like Control.Category, Control.Arrow, Data.Typeable and etc... Again, I don't know how is it for you, but for me and I think other newbie Haskell developers: Category, Arrow and other magic words are just words without any meaning. Not, i know Arrows, Monads are very useful in Haskell, but where is the something like Network.TcpClient, Network.HttpServer and etc... I know that Haskell has separate libraries for TCP, HTTP and other network and not only network things. But imagine, for exmaple I just started with Haskell and I want to write simple example like sending HTTP request and getting response, i need to understand where to find library for this, how to install it and etc... I don't speak that Haskell standard library must have all things for all case, but things like http client in stdlib is a standard case. Or i'm wrong? Let's look on golang for example. I think that it has a perfect standard library. Look on it and haskell standard library, do you feel difference? Golang is only five years and Haskell is 24, so big difference. Of course I have no statistic, but I see that golang is much popular for this moment. I don't think that it is main reason but one of.&lt;/p&gt;
&lt;h2&gt;Why to learn&lt;/h2&gt;
&lt;p&gt;I think it's not only Haskell problem, but other languages too. I see only one answer for this question: To get/improve knowledges in functional programming and look on your working programming language with other eyes after it. Yes, getting new knowledges it is very good. But what about practical side? I know that somewhere developers who get money for Haskell programming, but I don't see tons of vacancies for Haskell developers like for javascript, ruby or other tools and it is problem. Let's look in another side. For example i want to start learn Haskell for my super-cool pet project. But why Haskell in this case? For web development I can take habitual ruby/python/php, for system programming I can take C/C++ or maybe Rust, for concurrent programming I will choose erlang. So why i need to learn new programming language and in addition so different from my standard tools?&lt;/p&gt;
&lt;h2&gt;Lazyness&lt;/h2&gt;
&lt;p&gt;When we start to learn Haskell we can read something like this: Haskell - general purpose programming language with non-strict evaluation. I think that many developers know about lazy evaluations, but I am really not sure that all of they knows how it works, how to correctly use it and etc... In this way, I as beginner in Haskell must learn not only another programming paradigm, but also another evaluation order. It is much harder, because it is much implicit. For example let's take a look at popular ByteString library. It provides two implementations lazy strings and strict. But I still don't know where to use first and where to use second.&lt;/p&gt;
&lt;h2&gt;Different abstractions&lt;/h2&gt;
&lt;p&gt;It is problem of Haskell learning. Haskell uses different abstractions than other programming languages. And if you know python for example it will be much easy to learn ruby than Haskell. Let's look on simple echo example. You need to read input from stdin and prtin this string again. How we do it with python language:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All is transparent enough. We do this task with all imperative programming languages in this way. First we reading from stdin and put result to a variable and than pass this variable to the printing function. Let's look at the same Haskell example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;getLine&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok. Developer can guess about getLine and putStrLn, but what is it &amp;gt;&amp;gt;=. If we open documentation we will read something like this: &amp;gt;&amp;gt;= combine two monadic values... "combine two monadic values...". What is it Monad, How to use Monad and many many different questions with not easy answers sometimes. And it is only monads (concept which standard developer could not hear never), but there are many different concepts like Functors, Comonads and many many others which you can't meet in standard programming languages.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So it was a short list of my thoughts why Haskell is not popular. I am very interesting what do you think about Haskell popularity.
In the end I want to remind that all from this post only my opinion and if you're agree or disagree with me write me a comment.&lt;/p&gt;</summary><category term="haskell"></category></entry><entry><title>Getting started with elixir</title><link href="0xax.github.com/getting-started-with-elixir.html" rel="alternate"></link><published>2014-05-10T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-05-10:0xax.github.com/getting-started-with-elixir.html</id><summary type="html">&lt;p&gt;Some times ago i decided to start new hobby project and in front of me had the task which instrument to choose for this task implementation. From the header you can guess that i decided to use Elixir. Why Elixir? The main reason is simple: I like Erlang and all it's infrastructure, but in the same time i want to try something new and i think Elixir the best candidate for it. Now more details why i choose Elixir.&lt;/p&gt;
&lt;p&gt;First of all quote from Elixir site:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;Elixir&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;functional&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;programming&lt;/span&gt; &lt;span class="nx"&gt;aware&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="nx"&gt;built&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;Erlang&lt;/span&gt; &lt;span class="nx"&gt;VM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;It&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;dynamic&lt;/span&gt; &lt;span class="nx"&gt;language&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;flexible&lt;/span&gt; &lt;span class="nx"&gt;syntax&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;macro&lt;/span&gt; &lt;span class="nx"&gt;support&lt;/span&gt; &lt;span class="nx"&gt;that&lt;/span&gt; &lt;span class="nx"&gt;leverages&lt;/span&gt; &lt;span class="nx"&gt;Erlang&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="nx"&gt;abilities&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;build&lt;/span&gt; &lt;span class="nx"&gt;concurrent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;distributed&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;fault&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;tolerant&lt;/span&gt; &lt;span class="nx"&gt;applications&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;hot&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt; &lt;span class="nx"&gt;upgrades&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, meta-programming built on top of Erlang VM, very good start, what we have at the current moment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Familiar to us patter matching:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Immutability:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the &lt;code&gt;list&lt;/code&gt; will never change, so it simply constructs a new list with a head of 0 and a tail of list.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Familiar and extended data types. Elixir’s built-in types are:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;• Value types:
  – Arbitrary-sized integers
  – Floating point numbers
  – Atoms
  – Regular expressions&lt;/p&gt;
&lt;p&gt;• System types:
  – PIDs and Ports
  – References&lt;/p&gt;
&lt;p&gt;• Collection types
  – Lists
  – Tuples
  – Binaries&lt;/p&gt;
&lt;p&gt;And also: Keyword Lists, Ranges, Dictionaries, Maps and etc.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;High Order functions&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;The Amazing Pipes Operator&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;Enum&lt;/span&gt;
&lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="n"&gt;iex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Of course &lt;a href="http://www.erlang.org/doc/design_principles/users_guide.html"&gt;OTP&lt;/a&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;OtpServer&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;GenServer.Behaviour&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ow"&gt;when&lt;/span&gt; &lt;span class="n"&gt;is_number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:next_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_number&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And many many more...&lt;/p&gt;</summary><category term="elixir"></category></entry><entry><title>Elixir in action</title><link href="0xax.github.com/elixir-in-action.html" rel="alternate"></link><published>2014-04-14T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-04-14:0xax.github.com/elixir-in-action.html</id><summary type="html">&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt; that development of the &lt;code&gt;Weber&lt;/code&gt; is finished. And if you're interested in web development with elixirlang, take a look on &lt;a href="https://github.com/phoenixframework/phoenix"&gt;phoenix&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As you can know from my previous blog posts (&lt;code&gt;Using elixir to write ybot plugins&lt;/code&gt;, &lt;code&gt;Example of usage elixir with cowboy&lt;/code&gt; and &lt;code&gt;Started to dive into elixir-lang&lt;/code&gt;) some times ago i started to learn and use Elixir language. I'm using elixir not very much time, but already have some feels about it. Practical part of usage of elixir is - &lt;a href="https://github.com/elixir-web/weber"&gt;Weber&lt;/a&gt;. It is a MVC web framework for Elixir, and yesterday i released &lt;a href="https://twitter.com/0xAX/status/379319481694048257"&gt;Weber-0.0.1&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post i will try to describe my feels about Elixir.&lt;/p&gt;
&lt;h2&gt;Mix&lt;/h2&gt;
&lt;p&gt;First of all about mix tool. Mix is a first Elixir's tool with which we meet in practice when started to use the elixir.&lt;/p&gt;
&lt;p&gt;Mix is a build tool that provides tasks for creating, compiling, testing (and soon deploying) Elixir projects. Mix is inspired by the Leiningen build tool for Clojure and was written by one of its contributors.&lt;/p&gt;
&lt;p&gt;We can create new Elixir project with: mix new project_name Build it with: mix compile Handle dependencies: mix deps.get &amp;amp;&amp;amp; mix deps.compile And the main mix's feature as i think is a support of custum tasks. Mix task is just a Elixir module with mixed Mix.Task and run function. For example i'm using custom mix task in Weber for creating new project template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;Mix.Tasks.Weber&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;

    &lt;span class="na"&gt;@moduledoc&lt;/span&gt; &lt;span class="sh"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="sh"&gt;       Create a new weber project template.&lt;/span&gt;

&lt;span class="sh"&gt;       Usage:&lt;/span&gt;

&lt;span class="sh"&gt;         mix weber /home/user/myWebApp - Creates myWebApp directory with weber project skeleton.&lt;/span&gt;
&lt;span class="sh"&gt;         mix weber --version - Prints weber version.&lt;/span&gt;
&lt;span class="sh"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="na"&gt;@shortdoc&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Create a new weber project&amp;quot;&lt;/span&gt;

    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Mix.Task&lt;/span&gt;

    &lt;span class="na"&gt;@version&lt;/span&gt; &lt;span class="nc"&gt;Weber.Mixfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:version&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;usage&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--help&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;usage&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nc"&gt;Mix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Weber v&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="na"&gt;@version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="c1"&gt;#&lt;/span&gt;
      &lt;span class="c1"&gt;# Create here new project template&lt;/span&gt;
      &lt;span class="c1"&gt;#&lt;/span&gt;
      &lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;OTP&lt;/h2&gt;
&lt;p&gt;As Elixir is built on top of Erlang virtual machine, we can easily to build OTP application with Elixir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;Weber&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Application.Behaviour&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="nc"&gt;Weber.Supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="ss"&gt;:ok&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Root supervisor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;Weber.Supervisor&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Supervisor.Behaviour&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="ss"&gt;:supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="ss"&gt;:supervisor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_child&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Weber.App&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])]&lt;/span&gt;
      &lt;span class="n"&gt;supervise&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;strategy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="ss"&gt;:simple_one_for_one&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And simple gen_server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;Weber.App&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;GenServer.Behaviour&lt;/span&gt;

    &lt;span class="n"&gt;defrecord&lt;/span&gt; &lt;span class="nc"&gt;WeberApp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;static_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="ss"&gt;views_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="no"&gt;nil&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="ss"&gt;:gen_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="ss"&gt;:local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="bp"&gt;__MODULE__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="ss"&gt;:gen_server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:erlang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="ss"&gt;:init&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;WeberApp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="ss"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="ss"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="ss"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="ss"&gt;static_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;root_directory&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/lib/static/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="ss"&gt;views_dir&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;root_directory&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/lib/views/&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:init&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:noreply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;handle_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;:reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;compile and start it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;iex -S mix
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;There is ExUnit! It is a unit test framework that ships with Elixir. Let see in routing functions from the Weber:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routesList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="ss"&gt;:lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routesList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="na"&gt;@doc&lt;/span&gt; &lt;span class="sh"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sh"&gt;      Router attribute&lt;/span&gt;
&lt;span class="sh"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routesList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;routesList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And now we can write unit tests for it with ExUnit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test for Weber.Route.on and Weber.Route.otherwise&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;main_action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/user/0xAX/add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;action2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/user/:user/delete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;action2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;notfound&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;main_action&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/user/0xAX/add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;action2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/user/:user/delete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;action2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;controller&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;controller1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;action&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;notfound&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                  &lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Libraries&lt;/h2&gt;
&lt;p&gt;Although Elixir is now young language, it has good set of libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/guedes/exjson"&gt;exjson&lt;/a&gt; - JSON parser and genarator in Elixir;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/ecto"&gt;ecto&lt;/a&gt; - A database wrapper and language integrated query for Elixir;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/myfreeweb/httpotion"&gt;httpotion&lt;/a&gt; - The HTTP client for Elixir;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/josephwilk/amrita"&gt;amrita&lt;/a&gt; - A polite, well mannered and thoroughly upstanding testing framework for Elixir;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/meh/elixir-socket"&gt;elixir-socket&lt;/a&gt; - Socket wrapping for Elixir;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yrashk/genx"&gt;genx&lt;/a&gt; - Elixir-style library for most important OTP functionality;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/meh/elixir-datastructures"&gt;elixir-datastructures&lt;/a&gt; - Datastructures for Elixir.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and many more. Or you of course can use any erlang libraries. Just include it to your mix.exs file as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;...&lt;/span&gt;
 &lt;span class="kd"&gt;defp&lt;/span&gt; &lt;span class="n"&gt;deps&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:cowboy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.8.6&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;extend/cowboy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ecto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;elixir-lang/ecto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:pgsql&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ericmj/pgsql&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;elixir&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:exjson&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;github&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;guedes/exjson&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mix deps.get
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the end of this post i want to say many thanks to the Elixir community which helped me all this day, you're great!&lt;/p&gt;</summary><category term="elixir"></category><category term="erlang"></category></entry><entry><title>Implementing tcp socket acceptor pool with golang</title><link href="0xax.github.com/implementing-tcp-socket-acceptor-pool-with-golang.html" rel="alternate"></link><published>2014-04-06T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-04-06:0xax.github.com/implementing-tcp-socket-acceptor-pool-with-golang.html</id><summary type="html">&lt;p&gt;So, as maybe some of you knows that i have started to use Golang programming language for my pet projects and since to solve "Project Euler" tasks is very useful deal, but very boring in the same time, i decided to create something more closer to real life. I decided to write XMPP server in golang and in this post i will tell about one part of this server - netpool/tcp library. netpool/tcp - is a tcp based socket acceptor pool. The idea is very simple, you will launch TCP listener which will launch many acceptors besides one, in this way you no need to spend time for creating new connection acceptor.&lt;/p&gt;
&lt;p&gt;First of all let's create new tcp package and import all libraries which will we need in this project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;tcp&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;io&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;net&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bufio&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;strconv&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;crypto/tls&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;crypto/rand&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;net/textproto&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let's define types which we will need in our acceptor pool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;const (
    RefuseConnection = iota
    IncreaseConnection
)

const defaultIncreaseAcceptors = 50

//
// Listener instance
//
type Listener struct {
    Accnb int
    Port  int
    Handler Handler
    Lc    chan string
    OverFlowStrategy int
    Ssl   map[string]string
}

//
// Connection handler
//
type Handler func(string, Connection)

//
// Connection wrapper
//
type Connection struct {
    Conn  net.Conn
    Write chan []byte
    Quit chan bool
    Listener *Listener
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's go by order. First enumeration defines strategies when connection listener handles more connections than we define.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RefuseConnection&lt;/code&gt; - listener will refuse connections after connections amount overflow;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IncreaseConnection&lt;/code&gt; - listener will start yet another 50 acceptors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next is simpe constant value which defines how many acceptors need to start after connections amount overflow. Next is &lt;code&gt;ListenerStruct&lt;/code&gt; structure. It is a main structure which we will pass to StartListener function for launching new listener. It has following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Accnb&lt;/code&gt; - number of acceptors;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Port&lt;/code&gt; - connection port;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Handler&lt;/code&gt; - function with 2 parameters: input string and conn tcp.Connection. It will calls when client send something to server;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lc&lt;/code&gt; - listener channel, it needs for communicating with listener;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OverFlowStrategy&lt;/code&gt; - It can be 0 || 1, see note about overflow strategies;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ssl&lt;/code&gt; - it is a map, we need to use it if we want to use ssl. Just create map with 2 string keys: pam and key. Next if will show how to use it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also it has API which consists now only from one function - StopListener without any arguments, you can stop current connection with it. Next is a Connection structure. We have it every time as second parameter in connection handler function. It has simple API for manipulating with connection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Connection.Close&lt;/code&gt; - close current connection;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Connection.Send&lt;/code&gt;  - send response.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, now web have all types which we will use in this library. Now proceed to implementation. All API of netpool/tcp consists only from one function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;func StartNewListener(listener *Listener) {

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's a main function of this library and it launches new tcp listener and some acceptors. Let's see how it implemented. First of all it defines some variables like: acceptorCounter for count acceptors, checks is it connection over SSL or not and launches listener which depends on this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;var err error
var ln net.Listener
var cert tls.Certificate

if listener.Ssl == nil {
    ln, err = net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;:&amp;quot; + strconv.Itoa(listener.Port))
} else {
    cert, err = tls.LoadX509KeyPair(listener.Ssl[&amp;quot;pem&amp;quot;], listener.Ssl[&amp;quot;key&amp;quot;])
    config := tls.Config{Certificates: []tls.Certificate{cert}}
    config.Rand = rand.Reader
    ln, err = tls.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;:&amp;quot; + strconv.Itoa(listener.Port), &amp;amp;config)
}

if err != nil {
    log.Print(&amp;quot;[Error] TCP listener didn&amp;#39;t start: &amp;quot;, err)
    return
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next it creates 2 channels:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;connectionCounter&lt;/code&gt; - channel for communicating between acceptor goroutines and listener. If connection was closed it sends message to listener and listener decrease connection numbers, if new connection was accepted it increase connection number;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;closeConnection&lt;/code&gt; - channel for commuicating between listener and acceptor for closing current connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and starts acceptors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;connectionCounter := make(chan int)
closeConnection      := make(chan bool)

// start all acceptors
for accs := 0; accs &amp;lt; listener.Accnb; accs++ {
    go acceptor(accs, ln, connectionCounter, listener, closeConnection, acceptorsCounter)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this listener waits for messages from another goroutines for closing current listener, closing connection, connection removed/created and etc...:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;switch&lt;/span&gt; listener.OverFlowStrategy &lt;span class="p"&gt;{&lt;/span&gt;
    case &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; acceptorsCounter &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; listener.Accnb &lt;span class="p"&gt;{&lt;/span&gt;
            conn&lt;span class="p"&gt;,&lt;/span&gt; _ &lt;span class="o"&gt;:=&lt;/span&gt; ln.Accept&lt;span class="p"&gt;()&lt;/span&gt;
            conn.Close&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        case &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        listener.Accnb &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt;
        &lt;span class="kr"&gt;for&lt;/span&gt; i &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; i &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; defaultIncreaseAcceptors&lt;span class="p"&gt;;&lt;/span&gt; i&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            go acceptor&lt;span class="p"&gt;(&lt;/span&gt;i&lt;span class="p"&gt;,&lt;/span&gt; ln&lt;span class="p"&gt;,&lt;/span&gt; connectionCounter&lt;span class="p"&gt;,&lt;/span&gt; listener&lt;span class="p"&gt;,&lt;/span&gt; closeConnection&lt;span class="p"&gt;,&lt;/span&gt; acceptorsCounter&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    select &lt;span class="p"&gt;{&lt;/span&gt;
    case msg &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;connectionCounter&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; msg &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            acceptorsCounter&lt;span class="o"&gt;--&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            acceptorsCounter&lt;span class="o"&gt;++&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    case msg &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;listener.Lc&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; msg &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;stop&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            closeConnection &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; true
            &lt;span class="kp"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;listener.Lc&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kp"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;connectionCounter&lt;span class="p"&gt;)&lt;/span&gt;
            ln.Close&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kr"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So what about acceptors... It's pretty simple as a listener implementation, it starts from accepting new connection and waits for incoming messages from connected client. If there are any incoming data from client it call handler function and pass input data and &lt;code&gt;Connection&lt;/code&gt; structure to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;func acceptor&lt;span class="p"&gt;(&lt;/span&gt;acc int&lt;span class="p"&gt;,&lt;/span&gt; ln net.Listener&lt;span class="p"&gt;,&lt;/span&gt; counterChannel chan int&lt;span class="p"&gt;,&lt;/span&gt; listener &lt;span class="o"&gt;*&lt;/span&gt;Listener&lt;span class="p"&gt;,&lt;/span&gt; closeChannel chan bool&lt;span class="p"&gt;,&lt;/span&gt; accCounter int&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    conn&lt;span class="p"&gt;,&lt;/span&gt; err &lt;span class="o"&gt;:=&lt;/span&gt; ln.Accept&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kr"&gt;if&lt;/span&gt; err &lt;span class="o"&gt;!=&lt;/span&gt; nil &lt;span class="p"&gt;{&lt;/span&gt;
        log.Print&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;[Error] Tcp listener can&amp;#39;t accept new connection: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; acc&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kr"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt; send to the listener info about new accepted connection
    counterChannel &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; create new connection struct
    newConnection &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;Connection&lt;span class="p"&gt;{&lt;/span&gt;conn&lt;span class="p"&gt;,&lt;/span&gt; make&lt;span class="p"&gt;(&lt;/span&gt;chan &lt;span class="p"&gt;[]&lt;/span&gt;byte&lt;span class="p"&gt;),&lt;/span&gt; make&lt;span class="p"&gt;(&lt;/span&gt;chan bool&lt;span class="p"&gt;),&lt;/span&gt; listener&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="o"&gt;//&lt;/span&gt;
    &lt;span class="o"&gt;//&lt;/span&gt; start to handle new connction
    &lt;span class="o"&gt;//&lt;/span&gt;
    &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        line&lt;span class="p"&gt;,&lt;/span&gt; inputErr &lt;span class="o"&gt;:=&lt;/span&gt; textproto.NewReader&lt;span class="p"&gt;(&lt;/span&gt;bufio.NewReader&lt;span class="p"&gt;(&lt;/span&gt;conn&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="m"&gt;.&lt;/span&gt;ReadLine&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="kr"&gt;if&lt;/span&gt; inputErr &lt;span class="o"&gt;==&lt;/span&gt; io.EOF &lt;span class="p"&gt;{&lt;/span&gt;
            log.Print&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;inputErr: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; inputErr&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt; close connection
            conn.Close&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;//&lt;/span&gt; tell to listener that one acceptor died
            counterChannel &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;

            &lt;span class="kr"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        go listener.Handler&lt;span class="p"&gt;(&lt;/span&gt;line&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;newConnection&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="o"&gt;//&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="m"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;...&lt;/span&gt;
        &lt;span class="o"&gt;//&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After this it as a listener checks incoming message from other goroutines, to stop connection and etc...&lt;/p&gt;
&lt;p&gt;So it's end. As we can saw concurrency is a pretty simple with Golang.&lt;/p&gt;
&lt;p&gt;As i said in previous post i'm not a golang super-hacker, if you will have any recommendations for my golang code or you want to take part in XMPP server developing with golang i will be very pleased to hear it, write me in comment or ping me in &lt;a href="https://twitter.com/0xAX"&gt;twitter&lt;/a&gt;. Also i made this library primarily for future extd XMPP server but i tried to make it generic so i think it can be useful not only for me.&lt;/p&gt;</summary><category term="golang"></category></entry><entry><title>Elixir + Cowboy</title><link href="0xax.github.com/elixir-cowboy.html" rel="alternate"></link><published>2014-03-22T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-03-22:0xax.github.com/elixir-cowboy.html</id><summary type="html">&lt;p&gt;As you can know from previous blog post i started to learn/use Elixir language for my hobby project. Elixir is programming language which built on top of Erlang virtual machine and we can use libraries which was written in Erlang. In this post i will try to tell how to use  Elixir with Cowboy web server. You can find some different examples in the Internet about usage Elixir with cowboy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/clofresh/elixir_cowboy"&gt;elixir_cowboy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dry/elixir-cowboy-example"&gt;elixir-cowboy-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ninenines/cowboy/tree/master/examples/elixir_hello_world"&gt;elixir_hello_world&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alco/ws-elixir"&gt;ws-elixir&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will tell how to use Elixir with :cowboy_static handler. First of all we must create Elixir project with mix:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mix test
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;mix&lt;/code&gt; util will generate Elixir project skeleton. Now let's make frontend part. Create priv directory in the our project root directory. And there index.html, js and css directories. I put my favorite Angular.js and bootstrap.css to the js and css directory, but you of course can use any js/css libraries which you will want. Now add simple html template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;ng-app&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;utf-8&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Elixir and cowboy&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;css/bootstrap.css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;ng-controller=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;TestController&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;btn btn-primary&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Default&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;ng-repeat=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;n in nums&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;{{n * 2}}&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/angular.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;js/testJS.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And set up routing in cowboy and start it. Open &lt;code&gt;lib/testElixirWithCowboy.ex&lt;/code&gt; and add there:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;defmodule&lt;/span&gt; &lt;span class="nc"&gt;TestElixirWithCowboy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Application.Behaviour&lt;/span&gt;

    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:cowboy_router&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/css/[...]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:cowboy_static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:priv_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:testElixirWithCowboy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;]}},&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mimetypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="p"&gt;[&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;]}]}&lt;/span&gt;
                      &lt;span class="p"&gt;]},&lt;/span&gt;

                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/js/[...]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:cowboy_static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:priv_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:testElixirWithCowboy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public/js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;]}},&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mimetypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="p"&gt;[&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;application/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;]}]}&lt;/span&gt;
                      &lt;span class="p"&gt;]},&lt;/span&gt;

                      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/[...]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:cowboy_static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:priv_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:testElixirWithCowboy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;public/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;]}},&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:mimetypes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[{&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;,&lt;/span&gt; &lt;span class="p"&gt;[&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;gt;]}]},&lt;/span&gt;
                      &lt;span class="p"&gt;]}&lt;/span&gt;
                     &lt;span class="p"&gt;]}&lt;/span&gt;
            &lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;:ok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;_&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:cowboy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_http&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:http&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
        &lt;span class="nc"&gt;TestElixirWithCowboySup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_link&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="kd"&gt;def&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="ss"&gt;:ok&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And run application with executing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;iex -S mix
&lt;/pre&gt;&lt;/div&gt;</summary><category term="elixir"></category><category term="http"></category><category term="cowboy"></category></entry><entry><title>Reader monad understanding</title><link href="0xax.github.com/reader-monad-understanding.html" rel="alternate"></link><published>2014-03-04T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-03-04:0xax.github.com/reader-monad-understanding.html</id><summary type="html">&lt;p&gt;Some time ago I started to learn Haskell. It's not the first time (and event not second) that I started to learn this language. Every time I met different problems with understanding different abstractions like a Monads, Arrows, Monad Transformers and etc... I think that I'm not alone with this :) But, in this time, I decided not to throw up training until I can not say: yes I can write in Haskell without pain. I started (as every time i did it) with the most popular book (for newbies) about Haskell - Learn You a Haskell and stopped at Reader monad. Spending some time I understand it (at least I think that I understand :)) and decided to share my understanding of this monad for the same newbie haskellers as me.&lt;/p&gt;
&lt;p&gt;Let's imagine simple and ubiquitous case that we have application which needs in some initial configurations. Application will get configuration form configuration file, let it be conf.js with very simple structure like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0xAX&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It just has 1 &lt;code&gt;username&lt;/code&gt; key. Of course it has very little resemblance with the real application configuration, but it is not important now and enough for the example. We will read it with great Aeson library from Bryan O'Sullivan and use it in our application. Let's start with reading configuration file content and decoding json.&lt;/p&gt;
&lt;h2&gt;Aeson&lt;/h2&gt;
&lt;p&gt;For the start we must define data type for mapping json data in it with Aeson. As you can see above, we have simple json structure with username key. So we will map this json structure to the following data type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;data&lt;/span&gt; &lt;span class="kt"&gt;ConfigStructure&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt;
  &lt;span class="kt"&gt;ConfigStructure&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="n"&gt;key1&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="n"&gt;key2&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="kr"&gt;deriving&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Generic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;ConfigStructure&lt;/code&gt; has the same structure as our json, it has same fields: username. After data type creation we must read our configuration file with json data and decode it with aeson:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;configPath&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nf"&gt;configPath&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;conf.json&amp;quot;&lt;/span&gt;

&lt;span class="nf"&gt;getConfigContent&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="kt"&gt;ConfigStructure&lt;/span&gt;
&lt;span class="nf"&gt;getConfigContent&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;configContent&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="kt"&gt;BSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readFile&lt;/span&gt; &lt;span class="n"&gt;configPath&lt;/span&gt;
  &lt;span class="kr"&gt;let&lt;/span&gt; &lt;span class="kt"&gt;Just&lt;/span&gt; &lt;span class="n"&gt;decodedConfig&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt; &lt;span class="n"&gt;configContent&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Maybe&lt;/span&gt; &lt;span class="kt"&gt;ConfigStructure&lt;/span&gt;
  &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decodedConfig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here you can see that we reading json file with readFile function from Data.ByteString.Lazy. It has following type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;Prelude&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;qualified&lt;/span&gt; &lt;span class="nn"&gt;Data.ByteString.Lazy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;BSL&lt;/span&gt;
    &lt;span class="n"&gt;Prelude&lt;/span&gt; &lt;span class="n"&gt;BSL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;BSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readFile&lt;/span&gt;
    &lt;span class="n"&gt;BSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readFile&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;FilePath&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;BSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ByteString&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where FilePath is just String. Read configuration file and get it's content. After getting content of configuration file using Data.Aeson.decode function for decoding json data from it. After successful decoding we get Just ConfigStructure and now we can build Config data type for Reader and pass configuration file content to it.&lt;/p&gt;
&lt;h2&gt;Reader Monad&lt;/h2&gt;
&lt;p&gt;And now we come to the main point of this post. Main point of Reader monad to share read-only environment between couple of functions. Let's see how Reader declared in Control.Monad.Reader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;newtype&lt;/span&gt; &lt;span class="kt"&gt;Reader&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Reader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;runReader&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can see that it made as wrapper for runReader function with type r -&amp;gt; a where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; - is a reader which need to run and get final value from it;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; - is an environment which need to share&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another words we can build abstraction that will share configuration file content between different functions. Let's see how to implement it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Config&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Reader&lt;/span&gt; &lt;span class="kt"&gt;ConfigStructure&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we can see Config type synonym for Reader ConfigStructure String. Here ConfigStructure (see above) will be environment which we will share between functions and String return type. Now we write function for getting value of username field from configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;getKeyOne&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Config&lt;/span&gt;
&lt;span class="nf"&gt;getKeyOne&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;ask&lt;/span&gt;
  &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see it's pretty simple. Here is only one thing which we don't know - ask function. ask function retrieves the monad environment. Pretty simple. Now we can get username in any place of our application with runReader function. As you can remember runReader function has following type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;runReader&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where r is a reader which need to run (getKeyOne in our case) and a is environment (configuration file content in our case). Again pretty simple. We can get value of username with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;-- read configuration file&lt;/span&gt;
&lt;span class="nf"&gt;decodedConfig&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;getConfigContent&lt;/span&gt;
&lt;span class="c1"&gt;-- get &amp;amp; print value of key1&lt;/span&gt;
&lt;span class="nf"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;runReader&lt;/span&gt; &lt;span class="n"&gt;getKeyOne&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;decodedConfig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="haskell"></category></entry><entry><title>Emacs + GoLang [gofmt not found problem]</title><link href="0xax.github.com/emacs-golang-gofmt-not-found-problem.html" rel="alternate"></link><published>2014-02-21T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-02-21:0xax.github.com/emacs-golang-gofmt-not-found-problem.html</id><summary type="html">&lt;p&gt;Some time ago, as you maybe saw from my &lt;a href="https://twitter.com/0xAX/status/478185552194203650/photo/1"&gt;tweet&lt;/a&gt; that I eventually back to emacs. i moved back from sublime text editor to emacs for go, erlang, js programming and general usage. I installed standard go-mode with emacs package manager, configured go-mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;go-mode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and opened simple golang project in it. After the editing first &lt;em&gt;.go file i got a problem. When i tried to save my &lt;/em&gt;.go file, i got error in emacs minibuffer:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gofmt&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Solution for this problem proved to be very simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;load-path&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/home/alex/dev/go-projects/go/misc/emacs&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;load-path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;go-mode-load&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="emacs"></category><category term="golang"></category></entry><entry><title>Get function execution time in Haskell</title><link href="0xax.github.com/get-function-execution-time-in-haskell.html" rel="alternate"></link><published>2014-01-13T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2014-01-13:0xax.github.com/get-function-execution-time-in-haskell.html</id><summary type="html">&lt;p&gt;Some times ago I encountered with question: How to get function execution time in Haskell program? I asked this question at &lt;a href="http://stackoverflow.com/questions/6766450/haskell-function-execution-time"&gt;StackOverflow&lt;/a&gt;, and got some useful answers. Here i will try to describe how to do it. For example we have simple haskell program which will calculate sum of prime numbers which are between 0 and 10000. Something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TimingTest&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Start&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Result: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;primesSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Done&amp;quot;&lt;/span&gt;


&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="c1"&gt;-- Returns True if `n` is prime&lt;/span&gt;
&lt;span class="c1"&gt;--&lt;/span&gt;
&lt;span class="nf"&gt;isPrime&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Bool&lt;/span&gt;
&lt;span class="nf"&gt;isPrime&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="p"&gt;`&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;  &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nf"&gt;primesSum&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="nf"&gt;primesSum&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;isPrime&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;True&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Yes, it's not the best implementation of prime numbers, but it's not important at the current moment. Let's see what we have for checking execution time.&lt;/p&gt;
&lt;h2&gt;Time&lt;/h2&gt;
&lt;p&gt;First of all, the simplest method to get execution time is time command. Compile our source code and execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;time&lt;/span&gt; ./TimingTest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We must get something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;real 0m3.503s
user 0m3.492s
sys 0m0.004s
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;GHCI&lt;/h2&gt;
&lt;p&gt;The second method is just add &lt;code&gt;:set +s&lt;/code&gt; in &lt;code&gt;ghci&lt;/code&gt; before the function execution. Of course it's not the best method, because functions run much slower in &lt;code&gt;`ghci&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;TimeIt&lt;/h2&gt;
&lt;p&gt;The third method is to use &lt;a href="http://hackage.haskell.org/package/timeit"&gt;TimeIt&lt;/a&gt; haskell library by Lennart Augustsson. Very little, but useful library with simple API. It consist only from two functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;timeIt&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;-- | Wrap an IO computation so that it prints out the execution time&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;timeItT&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="kt"&gt;Source&lt;/span&gt; &lt;span class="c1"&gt;-- | Wrap an IO computation so that it returns execution time is seconds as well as the real value.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's remake our main function as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;System.TimeIt&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Start&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;timeIt&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Result: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;primesSum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;End&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and will get something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Start
Result: 5736396
CPU time: 8.22s
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Criterion&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://hackage.haskell.org/package/criterion"&gt;Criterion&lt;/a&gt; library provides a powerful but simple way to measure software performance by Bryan O'Sullivan. For using it, will remake again our main function as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kr"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Main&lt;/span&gt; &lt;span class="kr"&gt;where&lt;/span&gt;

&lt;span class="kr"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Criterion.Main&lt;/span&gt;

&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;IO&lt;/span&gt;&lt;span class="nb"&gt;()&lt;/span&gt;
&lt;span class="nf"&gt;main&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="n"&gt;defaultMain&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
       &lt;span class="n"&gt;bgroup&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Prime numbers.&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bench&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;prime numbers benchmark&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;whnfIO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;putStrLn&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="n"&gt;primesSum&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
       &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and as a result we will get:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;estimating clock resolution...
mean is 3.760062 us (160001 iterations)
found 3006 outliers among 159999 samples (1.9%)
2461 (1.5%) high severe

estimating cost of a clock call...
mean is 98.08812 ns (28 iterations)
found 4 outliers among 28 samples (14.3%)
4 (14.3%) low severe
&lt;/pre&gt;&lt;/div&gt;</summary><category term="haskell"></category></entry><entry><title>Amazon Kindle and Read-only file system</title><link href="0xax.github.com/amazon-kindle-and-read-only-file-system.html" rel="alternate"></link><published>2013-12-01T00:00:00+07:00</published><author><name>Alexander Kuleshov</name></author><id>tag:,2013-12-01:0xax.github.com/amazon-kindle-and-read-only-file-system.html</id><summary type="html">&lt;p&gt;Some times ago I've moved on 64 bit system and my first problem with new system was a situation when I couldn't copy any files to my &lt;a href="https://en.wikipedia.org/wiki/Amazon_Kindle#Kindle_5"&gt;Amazon Kindle 5&lt;/a&gt;. Every time, when I've tried to delete some file from my Kindle, I got following error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[Errno 30] Read-only file system
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is the solution how to fix it: First of all you need to determine your device in the system. To do this you need to execute &lt;code&gt;mount&lt;/code&gt; command for you device and you must have something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mount

/dev/sdc1 on /media/alex/Kindle &lt;span class="nb"&gt;type &lt;/span&gt;vfat &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;rw, nosuid, nodev, &lt;span class="nv"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000, &lt;span class="nv"&gt;gid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1000,   &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nv"&gt;shortname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;mixed, &lt;span class="nv"&gt;dmask&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0077, &lt;span class="nv"&gt;utf8&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1,      &lt;span class="se"&gt;\&lt;/span&gt;
showexec,flush,uhelper&lt;span class="o"&gt;=&lt;/span&gt;udisks2&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After that you mounted your device, just execute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo fsck.vfat -r /dev/sdc1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unmount and remove and plug again the USB cable of your Kindle device, and after this simple manipulations you'll  be able to copy any files to your Kindle.&lt;/p&gt;</summary><category term="linux"></category><category term="amazon kindle"></category></entry></feed>